<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML+CSS实现明星卡片制作</title>
    <url>/2020/04/15/HTML-CSS%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%98%9F%E5%8D%A1%E7%89%87%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="HTML-CSS实现明星卡片制作"><a href="#HTML-CSS实现明星卡片制作" class="headerlink" title="HTML+CSS实现明星卡片制作"></a>HTML+CSS实现明星卡片制作</h2><p>今天在B站偶然刷到一个视频，点击跳转，视频是制作一张折叠卡片，觉得效果很不错，并且对CSS3和HTML5都能进一步学习和复习，所以仿作一个易烊千玺卡片，喜欢的小伙伴一起动手做起来叭。</p>
<h4 id="效果实现"><a href="#效果实现" class="headerlink" title="效果实现"></a>效果实现</h4><p>卡片的首页是一张图片</p>
<a id="more"></a>
<p><img src="/2020/04/15/HTML-CSS%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%98%9F%E5%8D%A1%E7%89%87%E5%88%B6%E4%BD%9C/11.png" alt="易烊千玺"></p>
<p>在鼠标经过后有一个卡片翻开的效果，并且有视频播放，卡片的底页会写文本，鼠标离开后自动卡片自动合上</p>
<p><img src="/2020/04/15/HTML-CSS%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%98%9F%E5%8D%A1%E7%89%87%E5%88%B6%E4%BD%9C/22.png" alt></p>
<h5 id="核心思想：三个盒子重叠在一起，鼠标未经过的时，第一个盒子（卡片首页）显示，鼠标经过时，第一个盒子和第二个盒子的容器（二者在一个容器里）沿着Y轴转动180°就可以实现背面（第二个第三个盒子）卡片显示。"><a href="#核心思想：三个盒子重叠在一起，鼠标未经过的时，第一个盒子（卡片首页）显示，鼠标经过时，第一个盒子和第二个盒子的容器（二者在一个容器里）沿着Y轴转动180°就可以实现背面（第二个第三个盒子）卡片显示。" class="headerlink" title="核心思想：三个盒子重叠在一起，鼠标未经过的时，第一个盒子（卡片首页）显示，鼠标经过时，第一个盒子和第二个盒子的容器（二者在一个容器里）沿着Y轴转动180°就可以实现背面（第二个第三个盒子）卡片显示。"></a>核心思想：三个盒子重叠在一起，鼠标未经过的时，第一个盒子（卡片首页）显示，鼠标经过时，第一个盒子和第二个盒子的容器（二者在一个容器里）沿着Y轴转动180°就可以实现背面（第二个第三个盒子）卡片显示。</h5><hr>
<h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><p>HTML部分</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>折叠卡片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./card.css"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 封面页 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-outside"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-outside-container"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 正面 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-front"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-front-top"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://pic1.win4000.com/wallpaper/2018-10-17/5bc690bbf1a4c.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 图片我为了大家能够能直接复制代码使用用了网上的链接 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-front-footer"</span>&gt;</span></span><br><span class="line">                        View Me</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 正面结束 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 反面 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-back"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">video</span> <span class="attr">class</span>=<span class="string">"video-container"</span> <span class="attr">autoplay</span> <span class="attr">muted</span> <span class="attr">loop</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"https://ugcsjy.qq.com/uwMROfz2r57EIaQXGdGnC2ddDmY0gCKxs_YQn4ev8GMVk_hh/shg_17463489_50001_2bc92c4ea3673275b3b99c5e4b9fb949.f622.mp4?sdtfrom=v1010&amp;guid=81692f1683159df52f51fdbf768b6b0d&amp;vkey=7FF1E36F39042804691528609695C6488A4DA61DB6C7C1C9BA6DCBA5E4CD711144DB683CD6BA1104CCF10B015FD5D06B68F64262669415CD2EAF7239ECB0C84F425FDB3AFC4E28BCCE9A67BA0C25CB86699BF264860069226577F88FF6C4C27CC4F767A261AFFAFF94886719B8101897C0D4558D3E2E6045410FFC1E4120B89F"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 视频我为了大家能够能直接复制代码使用也用了网上的链接，可自行更改 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 封面页结束 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 封底页 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-inside"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-inside-container"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>For urban lovers<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hans your smile,had been flurried my time passag <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>love one i think the smile boy<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>view deals<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 封底页结束 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>CSS部分代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, #ebdabb, #e3d96c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">340px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e3d9c6</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="comment">/* 块级盒子垂直居中 */</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-outside</span>,</span><br><span class="line"><span class="selector-class">.card-inside</span> &#123;</span><br><span class="line">    <span class="comment">/* 父级元素有定位 */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">340px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-outside</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">    <span class="comment">/* 透视表示从那个位置看元素，加了透视动画效果才能更清晰</span></span><br><span class="line"><span class="comment">    并且透视必须加给父盒子 */</span></span><br><span class="line">    <span class="attribute">perspective</span>: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-front</span>,</span><br><span class="line"><span class="selector-class">.card-back</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e3d9c6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-outside-container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="comment">/* transform-style控制子元素是否开启三维立体环境 */</span></span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="comment">/* 旋转的中心点 */</span></span><br><span class="line">    <span class="attribute">transform-origin</span>: left;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.card-outside-container</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">180deg</span>);</span><br><span class="line">    <span class="comment">/* 鼠标经过的时候盒子容器旋转180° */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-front-top</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">260px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="comment">/* 裁剪路径变成多边形 */</span></span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">0</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">90%</span>, <span class="number">57%</span> <span class="number">90%</span>, <span class="number">50%</span> <span class="number">100%</span>, <span class="number">43%</span> <span class="number">90%</span>, <span class="number">0</span> <span class="number">90%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-front-footer</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">26px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff40a1</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-front-top</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-back</span> &#123;</span><br><span class="line">    <span class="comment">/* 卡片的背面要旋转180°让卡片展开的时候背面的视频可以出现 */</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.video-container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">0</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">0</span>, <span class="number">90%</span> <span class="number">50%</span>, <span class="number">100%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-inside</span> &#123;</span><br><span class="line">    <span class="comment">/* 让封底页实现在封面页的下面 */</span></span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-inside-container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="comment">/* 将主轴设为纵向 */</span></span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="comment">/* 元素先把行填满剩下的元素居中 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff40a1</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-inside-container</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-inside-container</span> <span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#ff40a1</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff40a1</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h4><ol>
<li><p><strong>transition-timing-function</strong>属性</p>
<ul>
<li><p>指定切换效果的速度，通常用简写的方式也就是直接作为transition的第三个参数</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>linear</td>
<td>规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）</td>
</tr>
<tr>
<td>ease</td>
<td>规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）</td>
</tr>
<tr>
<td>cubic-bezier(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td>
<td>在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><strong>transform-style: preserve-3d</strong>; </p>
<p>默认是不开启的</p>
<p><code>transform-style</code>控制子元素是否开启三维立体环境，代码要写给父级，影响的是子盒子。</p>
</li>
<li><p><strong>object-fit</strong> 属性指定元素的内容应该如何去适应指定容器的高度与宽度</p>
<ul>
<li><p>object-fit 一般用于 <code>img</code> 和 <code>video</code> 标签，一般可以对这些原素进行保留原始比例的剪切、缩放或者直接进行拉伸等</p>
</li>
<li><p>cover有点类似于视频或者图片（保持原比例下）充满整个盒子</p>
</li>
<li><table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>fill</td>
<td>默认，不保证保持原有的比例，内容拉伸满整个内容容器</td>
</tr>
<tr>
<td>contain</td>
<td>保持原有尺寸比例。内容被缩放</td>
</tr>
<tr>
<td>cover</td>
<td>保持原有尺寸比例。但部分内容可能被剪切，类似于放大</td>
</tr>
<tr>
<td>none</td>
<td>保留原有元素内容的长度和宽度，也就是说内容不会被重置</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><strong>clip-path</strong>属性;意味裁剪路径的意思，让我们可以很便捷的生成各种几何图形;是CSS的新属性</p>
<ul>
<li><p>clip-path 通过定义特殊的路径，实现我们想要的图形。而这个路径，正是 SVG 中的 path </p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>circle</td>
<td>裁剪成圆形</td>
</tr>
<tr>
<td>ellipse</td>
<td>裁剪成椭圆形</td>
</tr>
<tr>
<td>polygon</td>
<td>裁剪成多边形</td>
</tr>
</tbody></table>
</li>
<li><p>简单理解为：属性值带的参数其实就是每一个的点每个点用逗号分开，数值（50%，0）可以理解为坐标（x，y）。</p>
</li>
<li><p>例如<code>clip-path: polygon(50% 0,0 100%, 100% 100%);</code>就是(50%,0) 和 (0,100%) , (100%,100%)把这三个点连接起来就是绘制后的图形也就是下图的三角形ABC</p>
<p><img src="/2020/04/15/HTML-CSS%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%98%9F%E5%8D%A1%E7%89%87%E5%88%B6%E4%BD%9C/33.png" alt></p>
</li>
</ul>
</li>
<li><p><strong>box-border</strong>属性：定义了计算一个元素的总宽度和总高度的方法</p>
<p>在css盒模型的默认定义里，你对一个元素所设置的width 与 height只会应用到这个元素的内容区。如果这个元素有任何的border或padding，绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距值。所以一旦添加border和padding就需要不断的去减小width，确保盒子总大小不变。</p>
<ul>
<li><p><code>content-box</code> 是默认值。如果你设置一个元素的宽为100px，那么这个元素的内容区会有100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。</p>
</li>
<li><p><code>border-box</code> 告诉浏览器：你想要设置的边框和内边距的值是包含在width内的。也就是说，如果你将一个元素的width设为100px（宽度帮你定死），那么这100px会包含它的border和padding，内容区的实际宽度是width减去(border + padding)的值。这样就不需要我们再进行计算。大多数情况下，这使得我们更容易地设定一个元素的宽高。</p>
<p><em><code>width</code> = border + padding + 内容的宽度</em></p>
<p><em><code>height</code> = border + padding + 内容的高度</em></p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS实现三角形</title>
    <url>/2020/04/29/CSS%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2/</url>
    <content><![CDATA[<h3 id="使用纯CSS实现三角形"><a href="#使用纯CSS实现三角形" class="headerlink" title="使用纯CSS实现三角形"></a>使用纯CSS实现三角形</h3><p>在css中实现三角形的方法一般就是使用设置border的方法</p>
<h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>通过边框叠加样式会覆盖的原理，通过控制border的有无、宽度、是否透明就能实现不同三角形的展示</p>
<p>Tip:宽度和高度必须设置成0；否则是达不到想要的效果的！！</p>
<h4 id="实现样式"><a href="#实现样式" class="headerlink" title="实现样式"></a>实现样式</h4><p>首先我们先来看一下在边框不设置透明的情况下的实现效果</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.triangle</span> &#123;</span></span><br><span class="line">            width: 0;</span><br><span class="line">            height: 0;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            border-top: 50px solid black;</span><br><span class="line">            border-right: 50px solid pink;</span><br><span class="line">            border-left: 50px solid blue;</span><br><span class="line">            border-bottom: 50px solid red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实现效果：</p>
<p><img src="/2020/04/29/CSS%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2/%E6%A0%B7%E5%BC%8F1.png" alt></p>
<p>在这里我们发现在重叠的部分会被覆盖掉，那么我们只需要将不想显示出来的样式使用transparent属性设置就可以实现三角形的出现，并且通过设置border的有无和宽度就可以实现三角形的大小、角度改变。</p>
<p><strong>等腰三角形</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.triangle</span> &#123;</span></span><br><span class="line">            width: 0;</span><br><span class="line">            height: 0;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            border-top: 50px solid transparent;</span><br><span class="line">            border-right: 50px solid transparent;</span><br><span class="line">            border-left: 50px solid transparent;</span><br><span class="line">            border-bottom: 50px solid red;</span><br><span class="line"><span class="css">    		<span class="comment">/*我们可以根据想要的三角形设置其他方向上的border为透明*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/29/CSS%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2/%E6%A0%B7%E5%BC%8F2.png" alt></p>
<p><strong>直角三角形：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.triangle</span> &#123;</span></span><br><span class="line">            width: 0;</span><br><span class="line">            height: 0;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            border-left: 150px solid transparent;</span><br><span class="line">            border-bottom: 150px solid yellowgreen;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/29/CSS%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2/%E6%A0%B7%E5%BC%8F3.png" alt></p>
<p>其他样式的三角形：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.triangle</span> &#123;</span></span><br><span class="line">        width: 0;</span><br><span class="line">        height: 0;</span><br><span class="line">        margin: 100px auto;</span><br><span class="line">        border-top: 50px solid transparent;</span><br><span class="line">        border-right: 50px solid transparent;</span><br><span class="line">        border-left: 100px solid transparent;</span><br><span class="line">        border-bottom: 75px solid red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/29/CSS%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2/%E6%A0%B7%E5%BC%8F4.png" alt></p>
<p>非常简单的实现三角形的方式，小伙伴赶紧动手感受一下叭！    </p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中的显式转换</title>
    <url>/2020/05/09/JS%E4%B8%AD%E7%9A%84%E6%98%BE%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h3 id="显示转换"><a href="#显示转换" class="headerlink" title="显示转换"></a>显示转换</h3><p>显示转换一般指使用Number、String和Boolean三个构造函数，手动将各种类型的值，转换成数字、字符串或者布尔值。</p>
<h4 id="布尔型转换"><a href="#布尔型转换" class="headerlink" title="布尔型转换"></a>布尔型转换</h4><ol>
<li><p>ECMAScript中所有类型的值都有与Boolean值（true和false）等价的值。要将一个值转换为其对应的Boolean值，可以调用转型函数Boolean（）。</p>
<table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">转换为true</th>
<th align="center">转换为false</th>
</tr>
</thead>
<tbody><tr>
<td align="center">String</td>
<td align="center">任何非空字符串</td>
<td align="center">空字符串</td>
</tr>
<tr>
<td align="center">Number</td>
<td align="center">任何非零数字值</td>
<td align="center">0和NaN</td>
</tr>
<tr>
<td align="center">Object</td>
<td align="center">任何对象</td>
<td align="center">null</td>
</tr>
<tr>
<td align="center">Undefined</td>
<td align="center">不适用</td>
<td align="center">undefined</td>
</tr>
</tbody></table>
</li>
</ol>
<a id="more"></a>
<ol start="2">
<li><p>举例说明</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">""</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">0</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">Boolean</span>(&#123;&#125;);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">Boolean</span>([]);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h4><p>有三个函数可以把非数值转换为数值：Number()、parseInt()、parseFloat()</p>
<ol>
<li><p><strong>Number()</strong></p>
<p>Number()函数的转换规则：</p>
<p>（1）如是布尔值，true转换为1，false转换为0</p>
<p>（2）如是null，返回0</p>
<p>（3）如是undefined，返回NaN</p>
<p>（4）如是字符串，规则：</p>
<ul>
<li>如字符串中只包含数字（包括前面带正负号的情况），将其转换为十进制数值</li>
<li>如字符串中包含有效的浮点格式，将其转换为对应的浮动数值</li>
<li>如字符串中包含有效的十六进制格式，例如“oxf”，将其转换为相同大小的十进制整数值</li>
<li>如字符串为空，转换为0</li>
<li>如字符中包含除上述格式之外的字符，将其转换为NaN</li>
</ul>
<p>（5）<strong>如果是对象，自动调用对象的valueOf()方法，再依照前面的规则转换返回的值，如果转换结果为NaN，调用对象的toString()方法，再依照前面的规则转换</strong></p>
<ul>
<li><p>valueOf():JavaScript调用valueOf方法将对象转换为原始值。你很少需要自己调用<code>valueOf</code>方法；当遇到要预期的原始值的对象时，JavaScript会自动调用它。</p>
</li>
<li><p>不同类型对象返回valueOf()方法的返回值</p>
<table>
<thead>
<tr>
<th align="center">对象</th>
<th align="center">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Array.valueOf()</td>
<td align="center">返回数组对象本身。</td>
</tr>
<tr>
<td align="center">Boolean.valueOf()</td>
<td align="center">布尔值。</td>
</tr>
<tr>
<td align="center">Date.valueOf()</td>
<td align="center">存储的时间是从 1970 年 1 月 1 日午夜开始计的毫秒数。</td>
</tr>
<tr>
<td align="center">Function.valueOf()</td>
<td align="center">函数本身。</td>
</tr>
<tr>
<td align="center">Number.valueOf()</td>
<td align="center">数字值。</td>
</tr>
<tr>
<td align="center">Object.valueOf()</td>
<td align="center">对象本身。这是默认情况。</td>
</tr>
<tr>
<td align="center">String.valueOf()</td>
<td align="center">字符串值。</td>
</tr>
</tbody></table>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"abc"</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"12ad"</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"12"</span>));<span class="comment">//12</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"1.1"</span>));<span class="comment">//1.1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">true</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">false</span>));<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">null</span>));<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">undefined</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">" "</span>));<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">""</span>));<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"0xf"</span>));<span class="comment">//15</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"0070"</span>));<span class="comment">//70</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>parseInt()函数</strong>　　</p>
<p>规则：</p>
<p>（1）第一个参数是要解析的字符串，只会解析从第一个字符到不是数字的字符</p>
<p>（2）忽略字符串前面的空格，直到找到第一个非空格字符，如果第一个字符不是数字或者负号，会返回NaN，用parseInt()转换空字符串会返回NaN</p>
<p>（3）如果字符串以“ox”开头，且后跟数字字符，会当作一个十六进制整数</p>
<p>（4）第二个参数表示转换时使用的基数（多少进制），进制范围是2到36，没写该参数时默认是10进制</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">'22e3'</span>))<span class="comment">//22</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">'e3'</span>))<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="number">10.59</span>))<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="number">1</span>,<span class="number">2</span>))<span class="comment">//1,1在2的进制范围内，所以能取到</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="number">3</span>,<span class="number">2</span>))<span class="comment">//NaN,3不在2的进制范围内，所以不能取到</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="number">0x99</span>))<span class="comment">//153</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>parseFloat()函数</strong>　</p>
<p>（1）与parseInt()函数类似，也是从第一个字符开始解析每个字符，一直解析到字符串末尾，或解析到遇到一个无效的浮点数字字符为止。能够解析小数点，而parseInt()只能取到小数点前面的值</p>
<p>（2）字符串中的第一个小数点是有效的，第二个小数点就无效了</p>
<p>（3）只能解析十进制数，没有第二个参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10qq"</span>));<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10.5"</span>));<span class="comment">//10.5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"0xAF"</span>));<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"23.1.4"</span>));<span class="comment">//23.1</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h4><ol>
<li><p>toString()方法</p>
<p>（1）可以将其他类型的转成字符串型。数值、布尔值、对象和字符串值都有toString()方法。但null和undefined没有这个方法</p>
<p>（2）可以传递一个参数：输出数值的基数。通过传递参数，可以输出二进制、八进制、十六进制及其他有效进制格式表示的字符串值</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age=<span class="number">11</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age.toString());<span class="comment">//"11"</span></span><br><span class="line"><span class="keyword">var</span> b1=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b1.toString());<span class="comment">//"true"</span></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString());<span class="comment">//"10"，默认是10进制</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">2</span>));<span class="comment">//"1010",将num转成2进制</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">8</span>));<span class="comment">//"12",将num转成8进制</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">10</span>));<span class="comment">//"10"</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">16</span>));<span class="comment">//"a"</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>string()方法</p>
<p>null和undefined转成字符串的方法,对其他类型也适用</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value1=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> value2=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> value3=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> value4;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(value1));<span class="comment">//"10"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(value2));<span class="comment">//"true"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(value3));<span class="comment">//"null"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(value4));<span class="comment">//"undefined"</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的$nextTick</title>
    <url>/2020/07/18/Vue%E4%B8%AD%E7%9A%84nextTick/</url>
    <content><![CDATA[<h2 id="Vue中的-nextTick"><a href="#Vue中的-nextTick" class="headerlink" title="Vue中的$nextTick"></a>Vue中的$nextTick</h2><p>​      Vue.nectTick() 是在下次DOM更新循环结束之后执行延迟回调，在修改数据之后使用$nextTick，则可以在回调中获取更新后的DOM（dom的改变是发生在nextTick()之后），这个方法作用是当数据被修改后使用这个方法，会回调获取更新后的dom再render出来</p>
<p>　　Vue.nextTick()作用：在下次dom更新循环结束之后，执行延迟回调。在修改数据之后立即使用这个方法，获得更新后的dom</p>
<h4 id="在以下两个情况下需要用到Vue-nextTick"><a href="#在以下两个情况下需要用到Vue-nextTick" class="headerlink" title="在以下两个情况下需要用到Vue.nextTick()"></a>在以下两个情况下需要用到Vue.nextTick()</h4><a id="more"></a>
<ol>
<li><p>Vue声明周期的created() 钩子函数进行的DOM操作一定要放在Vue.nextTick() 的回调函数中，因为created() 执行的时候DOM实际上并未进行任何渲染，此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进Vue.nextTick()的回调函数中。</p>
<p><strong>与之对应的就是mounted 钩子函数，因为该函数执行时所有的DOM挂载和渲染都已完成，此时再钩子函数中进行任何DOM操作都不会有问题。</strong></p>
</li>
<li><p>在数据变化后要执行的某个操作，而这个操作需要使用随数据改变而改变的DOM结构的时候，这个操作应该放进Vue.nextTick() 的回调函数中</p>
</li>
<li><p><strong>简而言之，如果你在数据改变之后的操作跟改变之后的DOM有关，那么就应该使用Vue.nextTick()</strong></p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> // js</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: '#example',</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: '123'</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.message = 'new message' // 更改数据</span><br><span class="line">vm.$el.textContent === 'new message' // false</span><br><span class="line">Vue.nextTick(function () &#123;</span><br><span class="line">  vm.$el.textContent === 'new message' // true</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 在组件内使用 vm.$nextTick() 实例方法特别方便，因为它不需要全局 Vue，</span><br><span class="line">//并且回调函数中的 this 将自动绑定到当前的 Vue 实例上：</span><br><span class="line">Vue.component('example', &#123;</span><br><span class="line">  template: '<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>',</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: '未更新'</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    updateMessage: function () &#123;</span><br><span class="line">      this.message = '已更新'</span><br><span class="line">      console.log(this.$el.textContent) // =&gt; '未更新'</span><br><span class="line">      this.$nextTick(function () &#123;</span><br><span class="line">        console.log(this.$el.textContent) // =&gt; '已更新'</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 因为$nextTick()返回一个Promise对象，所以你可以使用新的 [ES2016 async/await]语法完成相同的事情：</span><br><span class="line">methods: &#123;</span><br><span class="line">  updateMessage: async function () &#123;</span><br><span class="line">    this.message = '已更新'</span><br><span class="line">    console.log(this.$el.textContent) // =&gt; '未更新'</span><br><span class="line">    await this.$nextTick()</span><br><span class="line">    console.log(this.$el.textContent) // =&gt; '已更新'</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP基础</title>
    <url>/2020/07/16/HTTP%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="HTTP基础知识"><a href="#HTTP基础知识" class="headerlink" title="HTTP基础知识"></a>HTTP基础知识</h3><h4 id="Http概述"><a href="#Http概述" class="headerlink" title="Http概述"></a>Http概述</h4><p>HTTP(超文本传输协议)是利用TCP在两台电脑(通常是Web服务器和客户端)之间传输信息的协议。客户端使用Web浏览器发起HTTP请求给Web服务器，Web服务器发送被请求的信息给客户端。是一种获取网络资源（如HTML、image）的应用层协议，是互联网通信的基础，由请求和响应构成。</p>
<p><strong>通常，客户端发起Http请求（在请求报文中会指定资源的URL）,然后用传输层的TCP协议建立连接，最后服务器响应请求，做出应答，回传数据报文。只有在TCP建立连接后Http才能够发送请求</strong></p>
<a id="more"></a>
<h4 id="Http原理"><a href="#Http原理" class="headerlink" title="Http原理"></a>Http原理</h4><ol>
<li>客户端的浏览器首先要通过网络与服务器建立连接，该连接是通过TCP 来完成的，一般 TCP 连接的端口号是80。 建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是 MIME 信息包括请求修饰符、客户机信息和许可内容</li>
<li>服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是 MIME 信息包括服务器信息、实体信息和可能的内容。</li>
</ol>
<h4 id="Http协议特征"><a href="#Http协议特征" class="headerlink" title="Http协议特征"></a>Http协议特征</h4><h5 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h5><p>所谓持久连接指的就是在双方建立起通信后，只要通信一方没有明确的提出断开就保持连接转态，节省了通信开销，加快了响应速率。</p>
<h5 id="管道化"><a href="#管道化" class="headerlink" title="管道化"></a>管道化</h5><p>管道化是建立在持久连接上的进一步优化。就是把请求的队列从客户端迁移到服务端，这样客户端就可以实现只要发送一次综合的请求，服务器端就能多次响应综合请求里的每一项请求。</p>
<h5 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h5><p>Http是一种无状态协议，请求和响应一一对应，不会出现两个请求复用一个响应的情况。也就是说每个请求都是独立的，即使在同一个链接中，请求之间也没有联系。为了保存请求状态，就有了cookie技术，cookie可以让请求和响应的报文都添加cookie信息，客户端将cookie值发送出去，服务器处理这个值，最终就能得到客户端的状态信息。</p>
<h4 id="Http报文"><a href="#Http报文" class="headerlink" title="Http报文"></a>Http报文</h4><p><strong>Http报文就是Http协议通信的内容</strong>，是一种简单的格式化数据块，由带语义的纯文本构成，所以能很方便的读写</p>
<ol>
<li><p>报文语法：报文分成两类分别是请求报文和响应报文</p>
<ul>
<li><p>请求报文由5部分组成</p>
<ul>
<li>请求方法</li>
<li>请求URL</li>
<li>Http协议版本</li>
<li>可选的请求头部</li>
<li>内容</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Method</span>&gt;</span><span class="tag">&lt;<span class="name">RequestURL</span>&gt;</span><span class="tag">&lt;<span class="name">Version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Headers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Body</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>响应报文由5部分组成</p>
<ul>
<li>Http协议版本</li>
<li>状态码</li>
<li>原因短语</li>
<li>可选的响应首部</li>
<li>内容</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Version</span>&gt;</span><span class="tag">&lt;<span class="name">Status</span> <span class="attr">Code</span>&gt;</span><span class="tag">&lt;<span class="name">Reson</span> <span class="attr">Phrase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Headers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img src="/2020/07/16/HTTP%E5%9F%BA%E7%A1%80/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E5%92%8C%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87.jpg" alt></p>
</li>
<li><p>请求方法：Http协议通过请求方法说明目的</p>
<ul>
<li>GET：获取数据</li>
<li>POST：提交数据</li>
<li>PUT：修改数据</li>
<li>DELETE：删除数据</li>
</ul>
</li>
</ol>
<h4 id="Http状态码"><a href="#Http状态码" class="headerlink" title="Http状态码"></a>Http状态码</h4><p>HTTP响应码响应码由三位十进制数字组成，它们出现在由HTTP服务器发送的响应的第一行。<br>响应码分五种类型，由它们的第一位数字表示：<br>1xx：信息，请求收到，继续处理 100<br>2xx：成功，行为被成功地接受、理解和采纳 200，201<br>3xx：重定向，为了完成请求，必须进一步执行的动作 301（请求的网页已永久移动到新位置），304<br>4xx：客户端错误，请求包含语法错误或者请求无法实现400， 403，404<br>5xx：服务器错误，服务器不能实现一种明显无效的请求 500，503（服务器端暂时无法处理请求）</p>
<p><img src="/2020/07/16/HTTP%E5%9F%BA%E7%A1%80/00.jpg" alt></p>
<p><img src="/2020/07/16/HTTP%E5%9F%BA%E7%A1%80/01.jpg" alt></p>
<p><img src="/2020/07/16/HTTP%E5%9F%BA%E7%A1%80/02.jpg" alt></p>
<p><img src="/2020/07/16/HTTP%E5%9F%BA%E7%A1%80/03.jpg" alt></p>
<h4 id="Http首部"><a href="#Http首部" class="headerlink" title="Http首部"></a>Http首部</h4><p>Http首部提供的信息能让客户端和服务器执行指定的操作；用来告知对方要如何操作发送的数据</p>
<ol>
<li>通用头部</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Request URL:请求的URL地址</span><br><span class="line">Request Method: 请求方法，get/post/put/……</span><br><span class="line">Status Code：状态码，200 为请求成功</span><br><span class="line">Remote Address：路由地址</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>请求头部</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Accept:告诉WEB服务器自己接受什么介质类型，*/* 表示任何类型，type/* 表示该类型下的所有子类型；</span><br><span class="line">Accept-Charset：浏览器申明自己接收的字符集</span><br><span class="line">Accept-Encoding：浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法  （gzip，deflate）</span><br><span class="line">Accept-Language：浏览器申明自己接收的语言。语言跟字符集的区别：中文是语言，中文有多种字符集，比如big5，gb2312，gbk等等。</span><br><span class="line">Authorization：当客户端接收到来自WEB服务器的 WWW-Authenticate 响应时，该头部来回应自己的身份验证信息给WEB服务器。</span><br><span class="line">Connection：表示是否需要持久连接。close（告诉WEB服务器或者代理服务器，在完成本次请求的响应后，断开连接，不要等待本次连接的后续请求了）。keep-alive（告诉WEB服务器或者代理服务器，在完成本次请求的响应后，保持连接，等待本次连接的后续请求）。</span><br><span class="line">Referer：发送请求页面URL。浏览器向 WEB 服务器表明自己是从哪个 网页/URL 获得/点击 当前请求中的网址/URL。</span><br><span class="line">User-Agent: 浏览器表明自己的身份（是哪种浏览器）。</span><br><span class="line">Host：发送请求页面所在域。</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>响应头部</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Age：当代理服务器用自己缓存的实体去响应请求时，用该头部表明该实体从产生到现在经过多长时间了。</span><br><span class="line">Accept-Ranges：WEB服务器表明自己是否接受获取其某个实体的一部分比如文件的一部分的请求bytes：表示接受，none：表示不接受。</span><br><span class="line">Cache-Control：服务器应遵循的缓存机制。</span><br><span class="line">          public(可以用 Cached 内容回应任何用户)</span><br><span class="line">          private（只能用缓存内容回应先前请求该内容的那个用户）</span><br><span class="line">          no-cache（可以缓存，但是只有在跟WEB服务器验证了其有效后，才能返回给客户端） </span><br><span class="line">          max-age：（本响应包含的对象的过期时间）  </span><br><span class="line">          ALL:  no-store（不允许缓存）  </span><br><span class="line">Connection：是否需要持久连接</span><br><span class="line">      close（连接已经关闭）。</span><br><span class="line">      keepalive（连接保持着，在等待本次连接的后续请求）。</span><br><span class="line">      Keep-Alive：如果浏览器请求保持连接，则该头部表明希望 WEB 服务器保持连接多长时间（秒）。例如：Keep-Alive：300</span><br><span class="line"></span><br><span class="line">Content-Encoding：WEB服务器表明自己使用了什么压缩方法（gzip，deflate）压缩响应中的对象。 例如：Content-Encoding：gzip </span><br><span class="line">Content-Language：WEB 服务器告诉浏览器自己响应的对象的语言。</span><br><span class="line">Content-Length：WEB 服务器告诉浏览器自己响应的对象的长度。例如：Content-Length: 26012</span><br><span class="line">Content-Range：WEB 服务器表明该响应包含的部分对象为整个对象的哪个部分。例如：Content-Range: bytes 21010-47021/47022</span><br><span class="line">Content-Type：WEB 服务器告诉浏览器自己响应的对象的类型。例如：Content-Type：application/xml</span><br></pre></td></tr></table></figure>

<h4 id="Http和Https的区别"><a href="#Http和Https的区别" class="headerlink" title="Http和Https的区别"></a>Http和Https的区别</h4><p>1、https协议需要到CA  （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。</p>
<p>2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p>
<p>3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p>
<p>4、http的连接很简单，是无状态的。Https协议是由SSL+Http协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。<strong>可防止数据在传输过程中不被窃取、修改，确保数据的完整性。</strong>(无状态的意思是其数据包的发送、传输和接收都是相互独立的。无连接的意思是指通信双方都不长久的维持对方的任何信息。)</p>
<p>5、相对来说http更加的快速，因为连接方式比https简单</p>
<p>6、Https连接缓存不如Http高效，会增加数据开销，甚至已有的安全措施也会因此而受到影响</p>
<h4 id="Http-1-1和Http-2"><a href="#Http-1-1和Http-2" class="headerlink" title="Http/1.1和Http/2"></a>Http/1.1和Http/2</h4><p>Http/2是1.1版本的进一步优化：通过单一的Http/2可以携带多个请求，服务器也可以实现响应多个请求，不再是传统的只能发一个请求响应一个的形式，大大加快了效率，减少了响应的时间（本质是共享一个TCP连接）。</p>
<h4 id="从浏览器地址栏输入url到显示页面的步骤（简单版本）"><a href="#从浏览器地址栏输入url到显示页面的步骤（简单版本）" class="headerlink" title="从浏览器地址栏输入url到显示页面的步骤（简单版本）"></a><strong>从浏览器地址栏输入</strong>url<strong>到显示页面的步骤（简单版本）</strong></h4><p>浏览器根据请求的 URL 交给 DNS 域名解析，找到真实 IP ，向服务器发起请求；</p>
<p>服务器交给后台处理完成后返回数据，浏览器接收文件（ HTML、JS、CSS 、图象等）</p>
<p>浏览器对加载到的资源（ HTML、JS、CSS 等）进行语法解析，建立相应的内部数据结构</p>
<p>载入解析到的资源文件，渲染页面，完成。</p>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS中的Vertial-align属性</title>
    <url>/2020/07/05/CSS%E4%B8%AD%E7%9A%84Vertial-align%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>vertical-align属性相信是很多初学前端布局小伙伴比较陌生和比较难以理解的一个属性。很多时候在想用vertical-align属性实现垂直居中的时候总是不起效果，只能去用别的方式实现。相信这是不少初学者的苦恼，下面让我从基本概念和用法、前端实现两个方面简单谈谈。</p>
<hr>
<h3 id="基本概念和用法"><a href="#基本概念和用法" class="headerlink" title="基本概念和用法"></a>基本概念和用法</h3><ol>
<li><p>*<em>首先我们要先了解HTML+CSS中的各种 “线” *</em></p>
<ul>
<li>顶线：中文汉字的的上端沿；</li>
<li>中线：横过英文字母x的中间的线；</li>
<li>基线（baseline）并不是汉字文字的下端沿，而是英文字母“x”的下端沿；</li>
<li>底线：中文汉字的下端沿；</li>
<li>内容区：指底线和顶线包裹的区域；内容区的大小依据font-size的值和字数进行变化。<a id="more"></a></li>
</ul>
</li>
<li><p><strong>baseline的确定规则</strong></p>
<ul>
<li>inline-table元素的baseline是它的table第一行的baseline。</li>
<li>父元素【line box】的baseline是最后一个inline box 的baseline。</li>
<li>inline-block元素的baseline确定规则。<ul>
<li>规则1：inline-block元素，如果内部有line box，则inline-block元素的baseline就是最后一个作为内容存在的元素[inline box]的baseline，而这个元素的baseline的确定就要根据它自身来定了。</li>
<li>规则2：inline-block元素，如果其内部没有line box或它的overflow属性不是visible，也就是overflow： hidden 和 inline-block元素里面没有内容，那么baseline将是这个inline-block元素的底margin边界。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>CSS中的4种box</strong></p>
<ul>
<li><strong>包含框（containing box）</strong>：每一个block都算containing box，它包含 line boxes，line boxes的高度垂直堆叠形成了 containing box的高度，如例中div的高度。</li>
<li><strong>行框（line boxes）</strong>：块内的内容渲染的每一行，都可以看成是一个行框，也可以说，每一行都是一个行框。line boxes的行数，由block的宽度及内容决定，当然是在不限制高度的情况下。一行内有多个行内框，一个一个的inline boxes组成了line boxes，行框是包含一行内行内框最高点和最低点。它的高度，由行内最大line-height决定。</li>
<li><strong>行内框（inline boxes）</strong>：inline boxes不会让内容成块显示，而是排成一行。在块元素（无论是 block 或 inline-block）中没有被内联元素包含的文本和内联/行内元素就是行内框。</li>
<li><strong>行内容区（content area）</strong>：content area 是一种围绕文字看不见的box。content area的大小与<strong>font-size</strong>大小相关。一般选择文本后，有背景颜色的就是内容区了。</li>
</ul>
</li>
<li><p><strong>Vertical-align的属性值</strong>：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>baseline</td>
<td>默认。子元素放置在父元素的基线上。</td>
</tr>
<tr>
<td>sub</td>
<td>垂直对齐文本的下标。</td>
</tr>
<tr>
<td>super</td>
<td>垂直对齐文本的上标。</td>
</tr>
<tr>
<td>top</td>
<td>把元素的顶端与行中最高元素的顶端对齐。</td>
</tr>
<tr>
<td>middle</td>
<td>把此元素放置在父元素的中部。</td>
</tr>
<tr>
<td>bottom</td>
<td>把元素的顶端与行中最低的元素的顶端对齐。</td>
</tr>
<tr>
<td>%</td>
<td>使用 “line-height” 属性的百分比值来排列此元素。允许使用负值。值是父盒子的line-height的值乘以百分比。也就是上移/下移的距离是父元素行高的百分之几。</td>
</tr>
</tbody></table>
</li>
<li><p><strong>Vertical-align的属性的应用对象</strong>：</p>
<ul>
<li>应用于inline水平和table-cell元素<ul>
<li>inline水平就是inline元素和inline-block元素</li>
<li>table-cell元素就是<td></td></li>
</ul>
</li>
<li>默认状态下的图片、按钮、文字和单元格</li>
</ul>
</li>
<li><p><strong>更改元素显示水平的方法</strong>：</p>
<ul>
<li>display更改元素的显示水平，例如：display：inlink：转成行内快</li>
<li>CSS声明更改元素的显示水平，例如：float：left：左浮动，会自动转成块元素</li>
</ul>
</li>
</ol>
<p>了解了以上概念和方法后，我们用可以用来前端实现</p>
<hr>
<h3 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h3><ol>
<li>首先我们实现的inline水平的居中，也就是内联元素和内联元素的居中，匿名内联元素也同理。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            height: 500px;</span><br><span class="line">            background-color: rosybrown;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        img &#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">vertical-align</span>: <span class="selector-tag">middle</span>;<span class="comment">/*该元素的中线与父元素的baseline（span的baseline）对齐*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../image/dog.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  父元素【line box】的baseline是最后一个inline box 的baseline。就是这里的span --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/05/CSS%E4%B8%AD%E7%9A%84Vertial-align%E5%B1%9E%E6%80%A7/01.jpg" alt></p>
<ol start="2">
<li>我们会发现图片并没有实现垂直居中，这是为什么呢？原因是不是vertical-align：middle不起作用，而是太短了，行高不够看不到效果。如果我们想要的是图片居中要怎么办呢，请看一下代码</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            height: 500px;</span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 500<span class="selector-tag">px</span>;<span class="comment">/*行高设为高度就可实现*/</span></span></span><br><span class="line">            background-color: rosybrown;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        img &#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">vertical-align</span>: <span class="selector-tag">middle</span>;<span class="comment">/*该元素的中线与父元素的baseline（span的baseline）对齐*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../image/dog.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  父元素【line box】的baseline是最后一个inline box 的baseline。就是这里的span --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/05/CSS%E4%B8%AD%E7%9A%84Vertial-align%E5%B1%9E%E6%80%A7/02.jpg" alt></p>
<p>第二种方法采用更改显示水平的方法，也就是用display：table-cell，将块元素转成单元格形式</p>
<p>强调：<strong>起作用的是table-cell自身，所以display和vertical-align必须写在同一元素内</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            display: table-cell;</span><br><span class="line">            vertical-align: middle;</span><br><span class="line">            height: 500px;</span><br><span class="line">            background-color: rosybrown;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        img &#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">vertical-align</span>: <span class="selector-tag">middle</span>;<span class="comment">/*该元素的中线与父元素的baseline（span的baseline）对齐*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../image/dog.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  父元素【line box】的baseline是最后一个inline box 的baseline。就是这里的span --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/05/CSS%E4%B8%AD%E7%9A%84Vertial-align%E5%B1%9E%E6%80%A7/03.jpg" alt></p>
<ol start="3">
<li>如果发现图片还是没有居中，那么极有可能你的元素的显示水平被更改或者继承了别的样式，成为了块级元素，此时需要检查代码，或者采取其他居中方式，具体可见我<a href="https://www.jianshu.com/p/0c47a95bfd30" target="_blank" rel="noopener">上一篇文章</a>。</li>
</ol>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用该种方法的局限性确实是比较大，又比较难以理解，所以我个人也很少会用到，如果说想用这种方法，但是没有效果，首先你需要确定父元素的基线在哪里，根据baseline来进行调整，其次，你需要在检查你的元素是否是inline水平和table-cell元素，这是该元素应用范围。</p>
]]></content>
      <categories>
        <category>HTML</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中的隐式转换</title>
    <url>/2020/05/15/JS%E4%B8%AD%E7%9A%84%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h2><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>在JS中有一个在学习过程和面试过程中很常见的问题就是JS的隐式转换，经常会有各种各样的“坑”等着我们去踩。下面我结合个人学习过程遇到的问题简单谈谈。另一种转换方式是显示转换，感兴趣的小伙伴可点击跳转我之前写的文章。</p>
<h4 id="算数运算符的转换"><a href="#算数运算符的转换" class="headerlink" title="算数运算符的转换"></a>算数运算符的转换</h4><ol>
<li>在加减乘除取余（+-<em>/%）的计算的时候，如果运算数是非数字的，会转成数字进行计算。*</em>但是当加号运算符时，String和其他类型时，其他类型都会转为 String**，此时的算数运算符作用的+就会变成拼接字符串的作用的+。这一转换是通过调用对象的方法valueOf()或tostring()方法来实现的。</li>
<li>当运算数是undefined的时候，也就是做改值未被赋值的时候，undefined 转化为Number是 为’NaN‘，任何值、任何类型与NaN相互运算都为NaN，也就是说只要未赋值算数运算后的值就是NaN。（值NaN永远不会其他值等同）</li>
<li>null的转换成number型后的值为0，Boolean值里的true为1，false为0<a id="more"></a></li>
<li>一元减运算符（-），当被用于一个运算数之前时，是一个取反操作。如果运算数是非数字的，运算符-会将其转成数字，如果参数不能别转换那么就会返回NaN。</li>
<li>一元加运算符（+），当放在数字型的运算数之前什么都没做，但一元加运算符对于非数字型的有转换成数字的功能，如果参数不能被转换，就会返回NaN</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>+<span class="string">"true"</span>);<span class="comment">//1true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>+<span class="literal">true</span>);<span class="comment">//1+1=2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>+<span class="literal">undefined</span>);<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>+<span class="literal">null</span>);<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(+[]);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(+&#123;&#125;);<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="相等运算符的转换"><a href="#相等运算符的转换" class="headerlink" title="相等运算符的转换"></a>相等运算符的转换</h4><ol>
<li>==用来检测两个值是否相等，如果相等返回值是true，否者是false</li>
<li>两个对象永远不会相等因为他们指向不同的地址，引用不同的对象</li>
<li>如果一个值是null，另一个值是undefined，他们会相等</li>
<li>如果一个值是数字一个值是字符串，==会把字符串转成数字，再用转换后的值比较</li>
<li>如果一个值是true，会将它转成1，再进行比较，如果是false，会将它转成0，再进行比较</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> == <span class="string">"1"</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;==&#123;<span class="attr">b</span>:<span class="number">1</span>&#125;);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span>==<span class="literal">undefined</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1"</span>==<span class="number">1</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="关系运算符的转换"><a href="#关系运算符的转换" class="headerlink" title="关系运算符的转换"></a>关系运算符的转换</h4><ol>
<li>大于、小于、小于等于、大于等于（&gt;、&lt;、&gt;=、&lt;=）这些比较运算符的运算数可以是任意类型的。但是比较运算只能在数字和字符串上执行，所以不是数字或者字符串的运算数将被转换成数字或者字符串</li>
<li>如果都是是字符串，那么将作为字符串进行比较。字符串的比较方法是件字符转成unicode码进行比较。多个字符比较是从左边往右边。</li>
<li>当字符串和数字比较时，如果字符串不代表数字，它将被转成NaN，比较的结果是false，如果是数字字符串，那么字符串会转成number类型，再进行比较。</li>
<li>如果某个比较数是NaN，或者被转成了NaN，比较运算符总是生成false</li>
<li>运算数不能被成功转换的时候，比较运算符总是返回false</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>&gt;<span class="string">"10"</span>)<span class="comment">//true,注意这里是字符串之间的比较，所以是是unicode码的比较</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>&gt;<span class="number">10</span>)<span class="comment">//false,这是字符串和数字的比较，会把字符串转成数字2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"abc"</span>&gt;<span class="string">"aac"</span>)<span class="comment">//true,会逐个比较，第一个字符相等第二个unicode码b大于c</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"aa"</span>&gt;<span class="number">2</span>)<span class="comment">//false,因为“aa”运算数是NaN，所以无论如何比较都是false</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="逻辑非运算符"><a href="#逻辑非运算符" class="headerlink" title="逻辑非运算符"></a>逻辑非运算符</h4><ol>
<li>运算符！是一元运算符，放在一个运算数之前，用来对运算数的布尔值取反。也就是当一个数据类型在前面加上！后就会返回的是布尔型的值。</li>
<li>逻辑运算符的优先级高于相等运算符</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([]==<span class="number">0</span>)<span class="comment">//true，[]通过valueOf和toString方法得到空字符串，Number("")==0,返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(![]==<span class="number">0</span>)<span class="comment">//true,</span></span><br><span class="line"><span class="comment">//由于逻辑运算符的优先级高，所以先将![]执行值为false，false==0所以返回true</span></span><br><span class="line"><span class="built_in">console</span>.log([]==![])<span class="comment">//true,</span></span><br><span class="line"><span class="comment">//[]隐式转换后是"",Number("")==0;![]=false,Number(false)==0;所以返回true</span></span><br><span class="line"><span class="built_in">console</span>.log([] == [])<span class="comment">//false</span></span><br><span class="line"><span class="comment">//复杂数据类型的数据存在堆中，只存地址，二者的地址不一样，所以返回的是false</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue实现刷新当前页面，重载页面数据</title>
    <url>/2020/07/13/Vue%E5%AE%9E%E7%8E%B0%E5%88%B7%E6%96%B0%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2%EF%BC%8C%E9%87%8D%E8%BD%BD%E9%A1%B5%E9%9D%A2%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>前几天在做个人播放器项目时，遇到一个问题：在进行搜索功能时，第一次搜索后，在搜素界面再次搜索时，发现搜索完成只是hash地址发生的转换，但是页面的数据并没有发生转换，也就是没能触发组件的刷新，由于搜索框的组件和搜索内容的组件二者之间不是父子组件也不是兄弟组件，很难实现数据交互。在苦恼许久查阅文档和百度搜索后，成功解决，给出以下解决方案给予参考。</p>
<p>该方案的应用场景可用于一些需要刷新页面，重载数据时，比如：在管理后台，在执行完，增，删，改，操作的时候等等。</p>
<a id="more"></a>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>需要用到一个 <a href="https://cn.vuejs.org/v2/api/#provide-inject" target="_blank" rel="noopener">provide / inject</a> 这对用例。这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>在根组件中，也就是App.vue中写如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;router-view v-if&#x3D;&quot;isRouterAlive&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">      	&lt;index v-if&#x3D;&quot;isRouterAlive&quot;&#x2F;&gt;</span><br><span class="line">      &#x2F;*只要是组件想要刷新的主要在组件中加上v-if&#x3D;&quot;isRouterAlive&quot;即可*&#x2F;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  provide ()&#123;</span><br><span class="line">     return &#123;</span><br><span class="line">       reload:this.reload</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">       isRouterAlive:true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    reload ()&#123;</span><br><span class="line">       this.isRouterAlive &#x3D; false</span><br><span class="line">       this.$nextTick(function()&#123;</span><br><span class="line">          this.isRouterAlive &#x3D; true</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>在触发的子组件中引用即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">	inject:[&#39;reload&#39;],</span><br><span class="line">	data()&#123;</span><br><span class="line">		return&#123;</span><br><span class="line">			inputValue:&#39;&#39;</span><br><span class="line">	 &#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	method:&#123;</span><br><span class="line">		toResult()&#123;</span><br><span class="line">		this.reload()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Tip: 只需要在子组件中引入inject:[‘reload’]；然后调用reload()方法即可实现刷新；是不是很简单方便~~</p>
<p>在此分享给大家</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue的$refs属性</title>
    <url>/2020/07/30/vue%E9%87%8C%E7%9A%84-refs%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h3 id="Vue里的-refs属性"><a href="#Vue里的-refs属性" class="headerlink" title="Vue里的$refs属性"></a>Vue里的$refs属性</h3><p><a href="http://www.fly63.com/tag/vue" target="_blank" rel="noopener">vue</a><a href="http://www.fly63.com/tag/js" target="_blank" rel="noopener">js</a>的极大程度的帮助减少了对dom的操作，他主要通过添加ref属性，但是当获取this.$refs属性时，稍有不注意就会输出undefined导致我们对dom节点的操作报错。this.$refs.xxx为undefined的几种情况记录：</p>
<ol>
<li><p><strong>在created里钩子函数中调用</strong></p>
<p>原因：created（）在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。所以this.$refs压根就调不到那个dom,因为页面还没有挂载上去。</p>
<p>解决：在mounted () 钩子函数中调用</p>
<p>注意：在此种情况中，元素节点一定是直接写在html中的，而不是通过数据或者条件渲染的</p>
<a id="more"></a></li>
<li><p><strong>数据或条件渲染（v-if,v-show）之后的调用.</strong></p>
<p>$ref本身作为渲染结果被创建，在初始渲染的时候不能访问他们，是不存在的</p>
<p>$refs不是响应式的，只在组件渲染完成后才填充</p>
<p>用于元素或子组件注册引用信息，注册完成，将会注册在父组件$refs对象上</p>
<p>调用对象是否和v-if结合使用</p>
<p>ref不是响应式的，所有的动态加载的模板更新它都无法相应的变化。</p>
<p>解决：可以通过setTimeOut(()=&gt;{…}, 0)来实现</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p ref&#x3D;&quot;testText&quot;&gt;this is a test data&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p v-if&#x3D;&quot;msg&quot; ref&#x3D;&quot;msgText&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;handleClick&quot;&gt;点一下&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; setTimeout &#125; from &#39;timers&#39;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      text: &#39;message show&#39;,</span><br><span class="line">      msg: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    console.log(this.$refs.testText)    &#x2F;&#x2F; undefined</span><br><span class="line">    &#x2F;&#x2F; this.$refs.testText.style.color &#x3D; &#39;#f00&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    console.log(this.$refs.testText)  &#x2F;&#x2F;  &lt;p data-v-5752faac&#x3D;&quot;&quot; style&#x3D;&quot;color: rgb(255, 0, 0);&quot;&gt;this is a test data&lt;&#x2F;p&gt;</span><br><span class="line">    console.log(this.$refs.msgText)     &#x2F;&#x2F; undefined</span><br><span class="line">    this.$refs.testText.style.color &#x3D; &#39;#f00&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick () &#123;</span><br><span class="line">      this.msg &#x3D; &#39;msg show&#39;</span><br><span class="line">      console.log(this.$refs.msgText)   &#x2F;&#x2F; undefined</span><br><span class="line">      setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        this.$refs.msgText.style.color &#x3D; &#39;#eee&#39;</span><br><span class="line">        console.log(this.$refs.msgText) &#x2F;&#x2F; &lt;p data-v-5752faac&#x3D;&quot;&quot; style&#x3D;&quot;color: rgb(238, 238, 238);&quot;&gt;msg show&lt;&#x2F;p&gt;</span><br><span class="line">      &#125;, 0)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas的基本使用和动态时钟实现</title>
    <url>/2020/07/08/canvas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E6%97%B6%E9%92%9F%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>HTML5 <code>&lt;canvas&gt;</code> 元素用于图形的绘制，通过脚本 (通常是JavaScript)来完成，<code>&lt;canvas&gt;</code> 标签只是图形容器，和别的标签不同，我们不在<code>&lt;canvas&gt;</code>标签里面写内容，必须使用脚本来绘制图形。Canvas是一个行内块元素。</p>
<h4 id="Canvas基础"><a href="#Canvas基础" class="headerlink" title="Canvas基础"></a>Canvas基础</h4><ol>
<li><p>画布的创建，在绘图之前我们首先是需要一张“纸”，默认情况下 <code>&lt;canvas&gt;</code> 元素没有边框和内容。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"myCanvas"</span> width=<span class="string">"200"</span> height=<span class="string">"100"</span>&gt;&lt;<span class="regexp">/canvas&gt;</span></span><br></pre></td></tr></table></figure>

<p>  标签通常需要指定一个id属性 (脚本中经常引用), width 和 height 属性定义的画布的大小</p>
<a id="more"></a></li>
<li><p>在<code>&lt;canvas&gt;</code>上绘制</p>
<ul>
<li><p>首先要获取到canvas元素</p>
</li>
<li><p>创建context对象  (这里我们可以利用判断是否有上下文对象来判断浏览器是否支持)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx=c.getContext(<span class="string">"2d"</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>2D上下文</p>
<ul>
<li>使用2d绘图上下文提供的方法，可以绘制简单的2D图形，比如矩形、弧形和路径等。2D上下文的起始位置是<code>&lt;canvas&gt;</code>画布的左上角，原点坐标为（0，0）。所有的坐标值都是基于这个点计算的，x越大表示越靠右，y越大表示越靠下。大家在绘图时候可以在脑海中构建一个坐标系。width和height表示在这两个方向上可用的像素数目。</li>
</ul>
</li>
<li><p>线条和填充、路径</p>
<ul>
<li>路径</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>属性值</th>
</tr>
</thead>
<tbody><tr>
<td>stroke()</td>
<td>绘制已定义的路径</td>
<td>无</td>
</tr>
<tr>
<td>beginPath()</td>
<td>起始一条路径，或重置当前路径</td>
<td>无</td>
</tr>
<tr>
<td>closePath()</td>
<td>创建从当前点回到起始点的路径</td>
<td>无</td>
</tr>
<tr>
<td>lineTo()</td>
<td>添加一个新点，然后在画布中创建从该点到最后指定点的线条</td>
<td>坐标</td>
</tr>
<tr>
<td>arc()</td>
<td>创建弧/曲线（用于创建圆形或部分圆）</td>
<td>（x,y,r,sAngle,eAngle,counterclockwise）</td>
</tr>
<tr>
<td>moveTo()</td>
<td>把路径起始位置移动到画布中的指定点，不创建线条</td>
<td>坐标</td>
</tr>
</tbody></table>
<ul>
<li>线条</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>属性值</th>
</tr>
</thead>
<tbody><tr>
<td>lineCap()</td>
<td>设置或返回线条的结束端点样式</td>
<td>butt：向线条的每个末端添加平直的边缘。round：向线条的每个末端添加圆形线帽。square：向线条的每个末端添加正方形线帽。</td>
</tr>
<tr>
<td>lineWidth()</td>
<td>设置或返回当前的线条宽度</td>
<td>number：当前线条的宽度，以像素计。</td>
</tr>
</tbody></table>
<ul>
<li>填充</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>属性值</th>
</tr>
</thead>
<tbody><tr>
<td>fillStyle()</td>
<td>设置或返回用于填充绘画的颜色、渐变或模式</td>
<td>color:指示绘图填充色的CSS颜色值；gradient：用于填充绘图的渐变对象</td>
</tr>
<tr>
<td>fill()</td>
<td>填充当前绘图（路径）</td>
<td>无</td>
</tr>
</tbody></table>
<p>实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"200"</span> height=<span class="string">"200"</span>&gt;&lt;<span class="regexp">/canvas&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> convas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line">    <span class="keyword">var</span> ctx = convas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">    ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">150</span>, <span class="number">150</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">80</span>, <span class="number">150</span>);</span><br><span class="line">    ctx.lineWidth = <span class="number">5</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">"#ccc"</span>;</span><br><span class="line">    ctx.stroke()</span><br><span class="line">    ctx.fill()</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/08/canvas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E6%97%B6%E9%92%9F%E5%AE%9E%E7%8E%B0/%E4%B8%89%E8%A7%92%E5%BD%A2.png" alt="三角形"></p>
</li>
</ol>
<ol start="5">
<li><p>文本、转化和保存</p>
<ul>
<li><p>文本</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>属性值</th>
</tr>
</thead>
<tbody><tr>
<td>font</td>
<td>设置或返回文本内容的当前字体属性</td>
<td>font-style、font-variant、font-weight</td>
</tr>
<tr>
<td>textAlign</td>
<td>设置或返回文本内容的当前对齐方式</td>
<td>center、left、right、start、end</td>
</tr>
<tr>
<td>textBaseline</td>
<td>设置或返回在绘制文本时使用的当前文本基线</td>
<td>middle、top、buttom</td>
</tr>
</tbody></table>
</li>
<li><p>转化</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>属性值</th>
</tr>
</thead>
<tbody><tr>
<td>scale()</td>
<td>缩放当前绘图至更大或更小</td>
<td>scalewidth：缩放当前绘图的宽度（1=100%）；scaleheight：缩放当前绘图的高度</td>
</tr>
<tr>
<td>rotate()</td>
<td>旋转当前绘图</td>
<td>angle：角度</td>
</tr>
<tr>
<td>transalte()</td>
<td>重新映射画布上的 (0,0) 位置</td>
<td>坐标（x,y）</td>
</tr>
</tbody></table>
</li>
<li><p>保存</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>属性值</th>
</tr>
</thead>
<tbody><tr>
<td>save()</td>
<td>保存当前环境的状态</td>
<td>无</td>
</tr>
<tr>
<td>restore()</td>
<td>返回之前保存过的路径状态和属性</td>
<td>无</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>绘制弧线的方法（利用arc()方法）</p>
<p>arc(x,y,r,sAngle,eAngle,counterclockwise)</p>
<p>x,y就是画这个弧线的圆心坐标；r为半径值；sAngle,eAngle就是起始角和结束角；<em>counterclockwise</em>是表示画的方向，false为顺时针，true为逆时针。</p>
<p>sAngle,eAngle的具体可见下图（<strong>记住起始位置不是在上面而是在右边</strong>）</p>
<p><img src="/2020/07/08/canvas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E6%97%B6%E9%92%9F%E5%AE%9E%E7%8E%B0/%E8%A7%92%E5%BA%A6.jpg" alt></p>
</li>
</ol>
<p>   Tip：当我们使用顺时针画和逆时针画是不同的，要注意区分,请看下面例子，只是画的方向不同，图形也不同</p>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> convas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = convas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">ctx.beginPath()</span><br><span class="line">ctx.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">1.5</span> * <span class="built_in">Math</span>.PI, <span class="literal">false</span>) <span class="comment">//顺时针画法</span></span><br><span class="line">ctx.stroke()</span><br><span class="line">ctx.closePath()</span><br><span class="line">ctx.beginPath()</span><br><span class="line">ctx.arc(<span class="number">200</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">1.5</span> * <span class="built_in">Math</span>.PI, <span class="literal">true</span>)<span class="comment">//逆时针画法</span></span><br><span class="line">ctx.stroke()</span><br><span class="line">ctx.closePath()</span><br></pre></td></tr></table></figure>

<p>  <img src="/2020/07/08/canvas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E6%97%B6%E9%92%9F%E5%AE%9E%E7%8E%B0/%E5%BC%A7%E7%BA%BF.jpg" alt></p>
<h4 id="动态时钟案例"><a href="#动态时钟案例" class="headerlink" title="动态时钟案例"></a>动态时钟案例</h4><p>原理：通过canvas绘制时钟的每一个线段，在把当前时间写入到绘图函数中，每一秒钟调用一次绘图函数，就可以实现时钟动态化</p>
<p>源码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>动态时钟<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#clock</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        div &#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"clock"</span> <span class="attr">width</span>=<span class="string">"200px"</span> <span class="attr">height</span>=<span class="string">"200px"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> clo = <span class="built_in">document</span>.getElementById(<span class="string">'clock'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> ctx = clo.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> width = ctx.canvas.width;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> height = ctx.canvas.height;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> r = width / <span class="number">2</span>; <span class="comment">//半径</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">drawBackground</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            ctx.save(); <span class="comment">//为了保存清除之前时钟的环境</span></span></span><br><span class="line"><span class="actionscript">            ctx.translate(r, r); <span class="comment">//切换中心点,此时（0，0）就在最中心了，不再是在左上角</span></span></span><br><span class="line">            ctx.beginPath();</span><br><span class="line"><span class="actionscript">            ctx.lineWidth = <span class="number">8</span>;<span class="comment">//线条的宽度</span></span></span><br><span class="line"><span class="javascript">            ctx.arc(<span class="number">0</span>, <span class="number">0</span>, r - <span class="number">4</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">false</span>)<span class="comment">//绘制最外圆</span></span></span><br><span class="line">            ctx.stroke();</span><br><span class="line"><span class="actionscript">            <span class="comment">//画小时数</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> hourNumber = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">2</span>];</span></span><br><span class="line"><span class="actionscript">            ctx.font = <span class="string">'18px Arial'</span>; <span class="comment">//设置文本大小</span></span></span><br><span class="line"><span class="actionscript">            ctx.textAlign = <span class="string">'center'</span>; <span class="comment">//文本居中</span></span></span><br><span class="line"><span class="actionscript">            ctx.textBaseline = <span class="string">'middle'</span>;</span></span><br><span class="line"><span class="actionscript">            hourNumber.forEach(<span class="function"><span class="keyword">function</span><span class="params">(number, i)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//求出每一个对应的弧度</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> rad = <span class="number">2</span> * <span class="built_in">Math</span>.PI / <span class="number">12</span> * i;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> x = <span class="built_in">Math</span>.cos(rad) * (r - <span class="number">30</span>);<span class="comment">//算出每个数字对应的坐标</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> y = <span class="built_in">Math</span>.sin(rad) * (r - <span class="number">30</span>);</span></span><br><span class="line"><span class="actionscript">                ctx.fillText(number, x, y) <span class="comment">//填充文本</span></span></span><br><span class="line">            &#125;);</span><br><span class="line"><span class="actionscript">            <span class="comment">//画每分钟对应的小点点</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> rad = <span class="number">2</span> * <span class="built_in">Math</span>.PI / <span class="number">60</span> * i;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> x = <span class="built_in">Math</span>.cos(rad) * (r - <span class="number">10</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> y = <span class="built_in">Math</span>.sin(rad) * (r - <span class="number">10</span>);</span></span><br><span class="line">                ctx.beginPath();</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (i % <span class="number">5</span> === <span class="number">0</span>) &#123; <span class="comment">//被5整除也就是小时数</span></span></span><br><span class="line"><span class="actionscript">                    ctx.fillStyle = <span class="string">"#000"</span>; <span class="comment">//要加上，否则由于canvas是基于状态的，所以会把													这里的颜色也改成#ccc</span></span></span><br><span class="line"><span class="javascript">                    ctx.arc(x, y, <span class="number">2.5</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">true</span>)</span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    ctx.fillStyle = <span class="string">"#ccc"</span></span></span><br><span class="line"><span class="javascript">                    ctx.arc(x, y, <span class="number">1.5</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">true</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">                ctx.fill()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">drawHour</span><span class="params">(hour, minute)</span> </span>&#123;<span class="comment">//画时针函数</span></span></span><br><span class="line"><span class="actionscript">            ctx.save(); <span class="comment">//保存画小时之前的环境</span></span></span><br><span class="line">            ctx.beginPath();</span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> rad = <span class="number">2</span> * <span class="built_in">Math</span>.PI / <span class="number">12</span> * hour; <span class="comment">//每一个小时要旋转的弧度</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> mrad = <span class="number">2</span> * <span class="built_in">Math</span>.PI / <span class="number">12</span> / <span class="number">60</span> * minute; <span class="comment">//分钟数移动的弧度</span></span></span><br><span class="line"><span class="actionscript">            ctx.rotate(rad + mrad); <span class="comment">//画布的旋转</span></span></span><br><span class="line">            ctx.lineWidth = 5;</span><br><span class="line"><span class="actionscript">            ctx.moveTo(<span class="number">0</span>, <span class="number">10</span>); <span class="comment">//移动原点到原点的下面一点，作为画时针的起始位置</span></span></span><br><span class="line"><span class="actionscript">            ctx.lineTo(<span class="number">0</span>, -r / <span class="number">2</span>); <span class="comment">//原点的位置在中心所以往上画要是负数</span></span></span><br><span class="line"><span class="actionscript">            ctx.lineCap = <span class="string">'round'</span>; <span class="comment">//设置线条的结尾形状</span></span></span><br><span class="line">            ctx.stroke();</span><br><span class="line"><span class="actionscript">            ctx.restore(); <span class="comment">//返回画小时之前的画布的保存过的路径和属性状态</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">drawMinute</span><span class="params">(minute)</span> </span>&#123;<span class="comment">//画分针函数</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//为了区分开画布环境</span></span></span><br><span class="line">            ctx.save();</span><br><span class="line">            ctx.beginPath();</span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> rad = <span class="number">2</span> * <span class="built_in">Math</span>.PI / <span class="number">60</span> * minute; <span class="comment">//每一个小时要旋转的弧度</span></span></span><br><span class="line"><span class="actionscript">            ctx.rotate(rad); <span class="comment">//画布的旋转</span></span></span><br><span class="line">            ctx.lineWidth = 3;</span><br><span class="line"><span class="actionscript">            ctx.moveTo(<span class="number">0</span>, <span class="number">10</span>); <span class="comment">//移动原点到原点的下面一点，作为画时针的起始位置</span></span></span><br><span class="line"><span class="actionscript">            ctx.lineTo(<span class="number">0</span>, -r + <span class="number">20</span>); <span class="comment">//原点的位置在中心所以往上画要是负数,值越大画的越短</span></span></span><br><span class="line"><span class="actionscript">            ctx.lineCap = <span class="string">'round'</span>; <span class="comment">//设置线条的结尾形状</span></span></span><br><span class="line">            ctx.stroke();</span><br><span class="line">            ctx.restore();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">drawSecond</span><span class="params">(second)</span> </span>&#123;<span class="comment">//画秒针函数</span></span></span><br><span class="line">            ctx.save();</span><br><span class="line">            ctx.beginPath();</span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> rad = <span class="number">2</span> * <span class="built_in">Math</span>.PI / <span class="number">60</span> * second; <span class="comment">//每一个小时要旋转的弧度</span></span></span><br><span class="line"><span class="actionscript">            ctx.rotate(rad); <span class="comment">//画布的旋转</span></span></span><br><span class="line">            ctx.lineWidth = 2;</span><br><span class="line"><span class="actionscript">            ctx.strokeStyle = <span class="string">"red"</span></span></span><br><span class="line"><span class="actionscript">            ctx.moveTo(<span class="number">0</span>, <span class="number">10</span>); <span class="comment">//移动原点到原点的下面一点，作为画时针的起始位置</span></span></span><br><span class="line"><span class="actionscript">            ctx.lineTo(<span class="number">0</span>, -r + <span class="number">20</span>); <span class="comment">//原点的位置在中心所以往上画要是负数,值越大画的越短</span></span></span><br><span class="line"><span class="actionscript">            ctx.lineCap = <span class="string">'round'</span>; <span class="comment">//设置线条的结尾形状</span></span></span><br><span class="line">            ctx.stroke();</span><br><span class="line">            ctx.restore();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">drawDot</span><span class="params">()</span> </span>&#123;<span class="comment">//画中心点</span></span></span><br><span class="line">            ctx.beginPath();</span><br><span class="line"><span class="actionscript">            ctx.fillStyle = <span class="string">"#fff"</span></span></span><br><span class="line"><span class="javascript">            ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">false</span>)</span></span><br><span class="line">            ctx.fill()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;<span class="comment">//绘图函数</span></span></span><br><span class="line"><span class="actionscript">            ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, width, height); <span class="comment">//每秒清除一次canvas再画出时分秒</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> hour = date.getHours();</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> minute = date.getMinutes();</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> second = date.getSeconds();</span></span><br><span class="line">            drawBackground()</span><br><span class="line">            drawHour(hour, minute);</span><br><span class="line">            drawMinute(minute);</span><br><span class="line">            drawSecond(second);</span><br><span class="line">            drawDot()</span><br><span class="line"><span class="actionscript">            ctx.restore(); <span class="comment">//画完之后</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        draw(); <span class="comment">//避免第一秒无效果</span></span></span><br><span class="line"><span class="actionscript">        setInterval(draw, <span class="number">1000</span>);<span class="comment">//定时器函数每秒调用一次</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实现结果：</p>
<p><img src="/2020/07/08/canvas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E6%97%B6%E9%92%9F%E5%AE%9E%E7%8E%B0/%E6%97%B6%E9%92%9F.jpg" alt="时钟特效"></p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>css也可以这么美之登录页面</title>
    <url>/2020/05/26/css%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%BF%99%E4%B9%88%E7%BE%8E%E4%B9%8B%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在前端学习中，有”三大山脉“分别是html+css+javascript相信每个学前端的小伙伴都学习过，但是很多人却都不知道用纯css也可以写出非常好看的页面来，今天写了一个简单的登录页面和各位小伙伴交流学习。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><a id="more"></a>
<p>HTML代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入图标和页面css文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"icon.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"login.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>LOGIN<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"image"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 图片大家可以自选电脑里任意，以写好调整图片大小css代码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imageM.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">            LOGIN</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-border"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"border"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-border"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"border"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"action"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-login"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont icon-qq"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont icon-weibo"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont icon-weixin"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Segoe UI'</span>, Tahoma, Geneva, Verdana, sans-serif;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="comment">/*实现块级元素垂直居中*/</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="comment">/*实现图片自适应屏幕大小*/</span></span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">41</span>, <span class="number">45</span>, <span class="number">62</span>, <span class="number">0.7</span>);</span><br><span class="line">    <span class="attribute">color</span>: aliceblue;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login</span> <span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login</span> <span class="selector-class">.input</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">41</span>, <span class="number">45</span>, <span class="number">62</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">color</span>: aliceblue;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login</span> <span class="selector-class">.input</span> <span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login</span> <span class="selector-class">.input-border</span> &#123;</span><br><span class="line">    <span class="comment">/*实现颜色从左到右渐变效果*/</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, #e8198b, #<span class="number">3</span>B65BB);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login</span> <span class="selector-class">.input-border</span> <span class="selector-class">.border</span> &#123;</span><br><span class="line">    <span class="comment">/*这里使用了css3的calc()方法用于自动计算宽高*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">4px</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">4px</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login</span> <span class="selector-class">.btn-login</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#3B65BB</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login</span> <span class="selector-class">.btn-login</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#3B65BB</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login</span> <span class="selector-class">.icon</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> dashed <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login</span> <span class="selector-class">.icon</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">187</span>, <span class="number">187</span>, <span class="number">187</span>);</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h3><p><img src="/2020/05/26/css%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%BF%99%E4%B9%88%E7%BE%8E%E4%B9%8B%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/login.jpg" alt="Login"></p>
<h3 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h3><p>本次学习主要是对页面布局的练手进一步加深对前端学习的兴趣以及对css的复习。同时对比较生疏的calc()方法进行学习。</p>
<p>calc()从字面我们可以把他理解为一个函数function，是css3的一个新增的功能，用来指定元素的长度。calc()最大的好处就是用在流体布局上，可以通过calc()计算动态得到元素的宽度。比如说“width:calc(50%+2em)”，这样一来你就不用考虑元素DIV的宽度值到底是多少，而把这个烦人的任务交由浏览器去计算。</p>
<p> <strong>calc()的运算规则</strong></p>
<ol>
<li>使用“+”、“-”、“*”和“/”四则运算</li>
<li>可以使用百分比、px、em、rem等单位</li>
<li>可以混合使用各种单位进行计算</li>
<li>表达式中有“+”和“-”时，其前后必须要有空格</li>
<li>表达式中有“*”和“/”时，其前后可以没有空格，但建议留有空格</li>
</ol>
]]></content>
      <categories>
        <category>HTML</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>圣杯布局</title>
    <url>/2020/06/30/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><p>所谓圣杯布局是前端开发中常用的布局方式也是面试常问的问题。所以必须掌握起来。主要是实现一个<strong>两侧宽度固定，中间宽度自适应的三栏布局</strong>。</p>
<h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol>
<li><p>中间元素在布局时候在左右元素的上方</p>
</li>
<li><p>三个布局元素都要向左浮动</p>
</li>
<li><p>在父元素身上设置padding值，值的大小为左右盒子的宽度</p>
</li>
<li><p>左盒子设margin-left：-100%，设置相对定位，移动盒子为了不挡住中间盒子</p>
</li>
<li><p>右盒子设margin-right：-（盒子自身宽度）</p>
</li>
<li><p>中间盒子设置width:100%，实现自适应</p>
</li>
<li><p>设置最小宽度，让在宽度达到指定值以后布局不会乱</p>
<a id="more"></a>
<h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4></li>
<li><p>布局设置</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>主盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>设置padding值</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: tomato;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>设置主盒子,和左右盒子基本样式</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: thistle;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: chartreuse;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: chocolate;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/30/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/%E6%A0%B7%E5%BC%8F01.png" alt></p>
<ol start="4">
<li>为左盒子设置相对定位、负外边距</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">left</span>: -<span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">margin-left</span>: -<span class="number">100%</span>;<span class="comment">/*重点*/</span></span><br><span class="line">            <span class="attribute">background-color</span>: chartreuse;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><strong>设置相对定位是为了将盒子移动到事先准备好的padding值的范围内，实现不遮住主盒子内容</strong></p>
<p><img src="/2020/06/30/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/%E6%A0%B7%E5%BC%8F2.png" alt></p>
<ol start="5">
<li>为右盒子设置负外边距</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">margin-right</span>: -<span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: chocolate;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/2050/archive/2012/08/13/2636467.html" target="_blank" rel="noopener">外边距的详细说明请点击这里</a></p>
<p><img src="/2020/06/30/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/%E6%BC%94%E7%A4%BA4.png" alt></p>
<ol start="6">
<li><p>设置最小宽度</p>
<p>想保证该布局效果正常显示，由于两侧都具有固定的宽度，所以需要给定页面一个最小的宽度，但这并不只是简单的200+200=400px。回想之前<code>left</code>使用了<code>position: relative</code>，所以就意味着在<code>center</code>开始的区域，还存在着一个<code>left</code>的宽度。所以页面的最小宽度应该设置为200+200+200=600px</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">            <span class="attribute">min-width</span>: <span class="number">600px</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>这样我们就实现了一个响应式的三栏布局形式</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>nodemon安装失败解决方案</title>
    <url>/2020/06/10/nodemon%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在前端学习过程中想必都会学习node.js吧，在node.js中有一个第三方模块nodemon尤为重要，它可以实现监听代码文件的变动，当代码改变之后，自动重启，就不用我们每修改一次代码就要手动重启，大大提高了工作的效率。但是安装过程中经常会出错，需要我们自行去解决。</p>
<h3 id="下载nodemon第三方模块"><a href="#下载nodemon第三方模块" class="headerlink" title="下载nodemon第三方模块"></a>下载nodemon第三方模块</h3><p>在windows powershell 中写入以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install nodemon -g</span><br></pre></td></tr></table></figure>

<p>Tip: -g表示全局安装，不可去掉</p>
<h4 id="显示错误"><a href="#显示错误" class="headerlink" title="显示错误"></a>显示错误</h4><p>在安装过程中会等待，可是等着等着会显示出以下错误</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm ERR! Unexpected end of JSON input while parsing near &#39;... Ise, &quot;directories&quot;: &#123;&#125;，&#39;</span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!    C: \User s\Huite\AppData\Roaming\npm cache\_ logs\2020 -04-03T15_ 26 08_ 305Z- debug. log</span><br></pre></td></tr></table></figure>

<p>会出现错误的原因就是由于npm下载默认在国外服务器，国内下载速度慢导致的延迟，从而下载失败</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>利用cnpm下载</p>
<p>在windows powershell 命令行中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install nodemon -g</span><br></pre></td></tr></table></figure>

<p><strong>如果还是报错，说明电脑没有下载cnpm，此时我们需要下载cnpm</strong></p>
<h3 id="下载cnpm"><a href="#下载cnpm" class="headerlink" title="下载cnpm"></a>下载cnpm</h3><p>在windows powershell 中写入以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>下载成功后，我们需要检查是否能够执行</p>
<p>在windows powershell 中写入以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure>

<p>如果显示版本号说明没有问题，直接输入cnpm install nodemon -g即可完成对nodemon的安装。如果不幸的出了以下错误，也别着急。</p>
<h4 id="显示错误-1"><a href="#显示错误-1" class="headerlink" title="显示错误"></a>显示错误</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm : 无法加载文件 C:\Users\hp\AppData\Roaming\npm\cnpm.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;135170 中的  </span><br><span class="line">about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line"> cnpm install amfe-flexible</span><br><span class="line">+ ~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure>

<p>会出现次错误说明运行的权限不够</p>
<h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>第一步：<br>重新打开一个power shell并且<strong>以管理员身份运行</strong><br>第二步：<br>输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure>

<p>然后输入<strong>A</strong> 回车即可。</p>
<p>最后我们再输入cnpm install nodemon -g</p>
<p>你就会发现已经安装成功啦~~</p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈前端布局中的对齐和居中</title>
    <url>/2020/03/22/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E4%B8%AD%E7%9A%84%E5%AF%B9%E9%BD%90%E5%92%8C%E5%B1%85%E4%B8%AD/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>​        相信很多初学前端页面布局的小伙伴都会遇到一些在元素垂直和居中的问题。为什么已经写了元素垂直和居中的属性页面却看不到效果呢？相信大多数人包括我在初学阶段都会遇到的问题，就是因为对属性的认识比较模糊，今天就让我来简单的和大家一起分析交流总结一下，希望能给予大家帮助。首先我们需要了解以下三种元素。（由于效果图很多都一样，所以没有把每一张都放上来，请谅解）</p>
<p><strong>块元素</strong>：所谓块元素就和一个盒子一样，有长宽 (默认为父级宽度的100%) 里面可以存放块级元素和行内元素。块级元素的特点就是：总是在新行上开始；高度，行高以及外边距和内边距都可控制。常见块元素(block element)：h1~h5、 div、ol、ul、table、p等等。</p>
<p><strong>行内元素 (内联元素)</strong>：所谓行内元素就是一行可以放多个，高宽不可设置，行内元素只能容纳文本和其他行内元素，不可放块级元素。常见内联元素(inline element)：a、strong、b、em、i等等。</p>
<a id="more"></a>
<p><strong>行内块元素</strong>：所谓行内块就是可以对它们设置行高、宽高、和对齐属性，不自动换行也就是一行可以放多个。由于行内块状元素综合了行内元素和块状元素的特性，所以在日常也用的较多。块元素、行内元素转行内块的方法：display：inlink-block。</p>
<hr>
<h3 id="元素水平居中对齐"><a href="#元素水平居中对齐" class="headerlink" title="元素水平居中对齐"></a>元素水平居中对齐</h3><ol>
<li><p>text-align 属性规定元素中的文本的水平对齐方式。</p>
<p>Tip：</p>
<ul>
<li><p>该种方式只对块级元素内所有的文字、行内元素、行内块元素有效，对块级元素是无法实现居中的</p>
</li>
<li><p>该种方法还有继承性，也就是说添加了该属性的块级元素它里面的块级元素的块级元素的行内元素也会居中           </p>
</li>
</ul>
</li>
</ol>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td>把文本排列到左边。</td>
</tr>
<tr>
<td>right</td>
<td>把文本排列到右边。</td>
</tr>
<tr>
<td>center</td>
<td>把文本排列到中间。</td>
</tr>
<tr>
<td>justify</td>
<td>实现两端对齐文本效果。</td>
</tr>
</tbody></table>
<p>实现代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.big</span> &#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        我要居中</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/22/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E4%B8%AD%E7%9A%84%E5%AF%B9%E9%BD%90%E5%92%8C%E5%B1%85%E4%B8%AD/01.png" alt></p>
<ol start="2">
<li><p>margin ：0 auto 用该种方法可实现对块级元素的居中对齐</p>
<p>Tip： </p>
<ul>
<li><p>使用 margin :0 auto;的盒子，必须要有width。</p>
</li>
<li><p>只有标准流中的盒子，才能使用 margin :0 auto。</p>
</li>
<li><p>该种方式是相对于父级元素水平居中。比如，父级元素是body那么就是页面居中。</p>
</li>
</ul>
</li>
</ol>
<p>实现代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.big</span> &#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>利用绝对定位实现，该种方式实现的同样是对块级元素的水平居中。</p>
<p>Tip:</p>
<ul>
<li>该种方法是相对于父元素偏移位置</li>
<li>记得在父元素上添加相对定位 position: relative “子绝父相”</li>
<li>需要减去自身宽度一半的偏移量</li>
</ul>
</li>
</ol>
<p>实现代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.big</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;<span class="comment">/* 记得添加相对定位 */</span></span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.small</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 50%;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin-left</span>: <span class="selector-tag">-50px</span>;<span class="comment">/* 记得减去偏移量 */</span></span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: salmon;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<p><img src="/2020/03/22/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E4%B8%AD%E7%9A%84%E5%AF%B9%E9%BD%90%E5%92%8C%E5%B1%85%E4%B8%AD/02.png" alt></p>
<ol start="4">
<li><p>利用css3方法实现块级元素居中</p>
<p>Tip：</p>
<ul>
<li>和上一种方法类似，也需要添加相对定位和绝对定位来实现</li>
<li>该种方法可用于在盒子宽度会改变时的情况，比如在移动端布局时，可以不要靠宽度来计算偏移量</li>
</ul>
</li>
</ol>
<p>实现代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.big</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;<span class="comment">/* 记得添加相对定位 */</span></span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.small</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 50%;</span><br><span class="line"><span class="css">            <span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">-50</span>%);<span class="comment">/* 利用css3实现偏移 */</span></span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: salmon;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>利用Flex弹性布局实现水平居中。</p>
<p>​        Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。即display： flex。采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p>
<p>Tip：</p>
<ul>
<li>设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</li>
<li>由于这里我们要水平居中，而主轴默认的是x轴，所以不用再设置主轴方向，只需在容器上设置justify-content属性居中即可。</li>
<li>对块级元素，行内元素，行内块元素和文本都有效。</li>
</ul>
</li>
</ol>
<p>实现代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.big</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.small</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: yellowgreen;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<p><img src="/2020/03/22/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E4%B8%AD%E7%9A%84%E5%AF%B9%E9%BD%90%E5%92%8C%E5%B1%85%E4%B8%AD/03.png" alt></p>
<hr>
<h3 id="元素垂直居中对齐"><a href="#元素垂直居中对齐" class="headerlink" title="元素垂直居中对齐"></a>元素垂直居中对齐</h3><ol>
<li><p>line-height 属性设置行间的距离（行高）。</p>
<p>Tip：</p>
<ul>
<li>不允许使用负值。</li>
<li><strong>只适用于子元素为单行文本的情况！！！</strong>（重点）</li>
<li>对块级元素无效</li>
</ul>
</li>
</ol>
<ul>
<li><p>行高和高度之间有以下关系</p>
<table>
<thead>
<tr>
<th>行高和高度</th>
<th>位置</th>
</tr>
</thead>
<tbody><tr>
<td>行高=高度</td>
<td>垂直居中</td>
</tr>
<tr>
<td>行高&gt;高度</td>
<td>相对于居中位置偏下</td>
</tr>
<tr>
<td>行高&lt;高度</td>
<td>相对于居中位置偏上</td>
</tr>
</tbody></table>
</li>
</ul>
<p>实现代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.big</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.small</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 100<span class="selector-tag">px</span>;<span class="comment">/*让123在小盒子中垂直居中*/</span></span></span><br><span class="line">            background-color: yellowgreen;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/22/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E4%B8%AD%E7%9A%84%E5%AF%B9%E9%BD%90%E5%92%8C%E5%B1%85%E4%B8%AD/04.png" alt></p>
<ol start="2">
<li><p>vertical-align 属性设置一个元素的垂直对齐方式。该属性定义<strong>行内元素</strong>的基线相对于该元素所在行的基线的垂直对齐。允许指定负长度值和百分比值。</p>
<p>该属性应该会是大多数初学前端小伙伴由于用得较少容易忽视和会觉得比较难的一个点，我争取在以后更新一篇专门讲该属性的文章。（<a href="https://www.jianshu.com/p/8d28cb37758f" target="_blank" rel="noopener">转到该文章</a>）在这里我们知道有这么个方法实现垂直对齐即可。</p>
</li>
</ol>
<p>实现代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.big</span> &#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">            display: table-cell;</span><br><span class="line">            vertical-align: middle;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.small</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            line-height: 50px;</span><br><span class="line">            background-color: yellowgreen;</span><br><span class="line">        &#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/22/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E4%B8%AD%E7%9A%84%E5%AF%B9%E9%BD%90%E5%92%8C%E5%B1%85%E4%B8%AD/05.png" alt></p>
<ol start="3">
<li><p>利用绝对定位实现，该种方式实现的同样是对块级元素的垂直居中。</p>
<p>Tip:</p>
<ul>
<li>该种方法是相对于父元素偏移位置</li>
<li>记得在父元素上添加相对定位 position: relative “子绝父相”</li>
<li>需要减去自身高度一半的偏移量</li>
</ul>
</li>
</ol>
<p>实现代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.big</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.small</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50%;</span><br><span class="line">            margin-top: -60px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 120px;</span><br><span class="line">            background-color: yellowgreen;</span><br><span class="line">        &#125;      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<p><img src="/2020/03/22/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E4%B8%AD%E7%9A%84%E5%AF%B9%E9%BD%90%E5%92%8C%E5%B1%85%E4%B8%AD/06.png" alt></p>
<ol start="4">
<li><p>利用css3方法实现块级元素垂直居中</p>
<p>Tip：</p>
<ul>
<li>和上一种方法类似，也需要添加相对定位和绝对定位来实现</li>
<li>该种方法可用于在盒子宽度会改变时的情况，比如在移动端布局时，可以不要靠宽度来计算偏移量</li>
</ul>
</li>
</ol>
<p>实现代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.big</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.small</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50%;</span><br><span class="line">            transform: translateY(-50%);</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: yellowgreen;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<p><img src="/2020/03/22/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E4%B8%AD%E7%9A%84%E5%AF%B9%E9%BD%90%E5%92%8C%E5%B1%85%E4%B8%AD/05.png" alt></p>
<ol start="5">
<li><p>利用Flex弹性布局实现垂直居中。</p>
<p>Tip：</p>
<ul>
<li><p>对块级元素，行内元素，行内块元素和文本都有效果。</p>
</li>
<li><p>需要在该种方法设置主轴，由于默认是从左到右，所以要换成从上到下；即justify-content: center。</p>
</li>
<li><p>设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</p>
</li>
</ul>
</li>
</ol>
<p>实现代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.big</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line"><span class="css">            <span class="selector-tag">flex-direction</span>: <span class="selector-tag">column</span>;<span class="comment">/* 切换主轴方向 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">justify-content</span>: <span class="selector-tag">center</span>;<span class="comment">/*垂直居中*/</span></span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.small</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: yellowgreen;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>利用margin属性实现</p>
<p>Tip：</p>
<ul>
<li>需要添加相对定位和绝对定位来实现</li>
<li>Top和bottom设置为0；margin： auto; 上下不偏移时才能让系统自动设置偏移量</li>
<li>对块级元素有效，对行内元素、行内块元素和文本无效</li>
<li>该种方法个人用得较少，但也是一种居中的方法</li>
</ul>
</li>
</ol>
<p>实现代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.big</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.small</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            margin: auto;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: yellowgreen;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<p><img src="/2020/03/22/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E4%B8%AD%E7%9A%84%E5%AF%B9%E9%BD%90%E5%92%8C%E5%B1%85%E4%B8%AD/07.jpg" alt></p>
<hr>
<h3 id="元素垂直水平居中对齐"><a href="#元素垂直水平居中对齐" class="headerlink" title="元素垂直水平居中对齐"></a>元素垂直水平居中对齐</h3><ol>
<li><p>利用line-height和text-align相结合的方法。</p>
<p>Tip：</p>
<ul>
<li>该种方法只对行内元素、行内块元素和文本有效，对块级元素无效。</li>
<li>是较为常用的方法，需重点掌握</li>
<li>设置方法为：line-height: height值；和text-align: center 。</li>
</ul>
</li>
</ol>
<p>实现代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.big</span> &#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            line-height: 300px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<p><img src="/2020/03/22/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E4%B8%AD%E7%9A%84%E5%AF%B9%E9%BD%90%E5%92%8C%E5%B1%85%E4%B8%AD/08.jpg" alt></p>
<ol start="2">
<li><p>利用Flex布局的方法。</p>
<p>Tip：</p>
<ul>
<li>需要把元素的主轴居中侧轴居中即可；justify-content: center; align-items: center</li>
<li>不具备继承性，只能对它的子盒子起作用，无法继续往下起作用</li>
<li>对块元素，行内元素、行内块元素和文本元素均有效   </li>
</ul>
</li>
</ol>
<p>实现代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.big</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line"><span class="css">            <span class="selector-tag">justify-content</span>: <span class="selector-tag">center</span>;<span class="comment">/*主轴居中*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">align-items</span>: <span class="selector-tag">center</span>;<span class="comment">/*侧轴居中*/</span></span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.small</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: yellowgreen;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.small1</span> &#123;</span></span><br><span class="line">            width: 50px;</span><br><span class="line">            height: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>/*对子盒子的子盒子无效*/</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<p><img src="/2020/03/22/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E4%B8%AD%E7%9A%84%E5%AF%B9%E9%BD%90%E5%92%8C%E5%B1%85%E4%B8%AD/09.jpg" alt></p>
<ol start="3">
<li><p>利用margin方法。</p>
<p>Tip：</p>
<ul>
<li>该方法只对块级元素有效</li>
<li>需要margin属性和偏移量相互配合实现</li>
<li>在这里我介绍该方法的两种方法。第一种通过把所有的偏移量设为0，并和margin结合的方法实现；第二种通过移动自身元素一半的偏移量实现 </li>
<li>该方法不具备继承性</li>
</ul>
</li>
</ol>
<p>实现代码如下（第一种）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.big</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.small</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">            margin: auto;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: yellowgreen;</span><br><span class="line">        &#125;     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实现代码如下（第二种）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.big</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.small</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50%;</span><br><span class="line">            left: 50%;</span><br><span class="line">            margin-top: -50px;</span><br><span class="line">            margin-left: -50px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: yellowgreen;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<p><img src="/2020/03/22/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E4%B8%AD%E7%9A%84%E5%AF%B9%E9%BD%90%E5%92%8C%E5%B1%85%E4%B8%AD/10.jpg" alt></p>
<ol start="4">
<li><p>利用css3的方法</p>
<p>Tip：</p>
<ul>
<li>对块级元素有效</li>
<li>适用于子元素宽高不固定的情况下</li>
</ul>
<p>实现代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.big</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.small</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50%;</span><br><span class="line">            left: 50%;</span><br><span class="line">            transform: translate(-50%, -50%);</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: yellowgreen;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<p><img src="/2020/03/22/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E4%B8%AD%E7%9A%84%E5%AF%B9%E9%BD%90%E5%92%8C%E5%B1%85%E4%B8%AD/10.jpg" alt></p>
</li>
</ol>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在前端布局过程中之所以会遇到一些居中效果出不来的情况就是因为对页面布局的属性不熟悉，哪些只对块级元素有效，哪些只对行内元素有效，哪些对所有的元素都有效，哪些有继承性，这都需要我们去掌握，希望这篇文章能给各位小伙伴带来一些帮助！</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>概述TCP/IP协议及其三握四挥</title>
    <url>/2020/07/14/%E6%A6%82%E8%BF%B0TCP-IP%E5%8D%8F%E8%AE%AE%E5%8F%8A%E5%85%B6%E4%B8%89%E6%8F%A1%E5%9B%9B%E6%8C%A5/</url>
    <content><![CDATA[<h4 id="TCP-IP基础"><a href="#TCP-IP基础" class="headerlink" title="TCP/IP基础"></a>TCP/IP基础</h4><h5 id="TCP-IP具体含义"><a href="#TCP-IP具体含义" class="headerlink" title="TCP/IP具体含义"></a>TCP/IP具体含义</h5><p>从字面意义上讲，有人可能会认为 TCP/IP 是指 TCP 和 IP 两种协议。实际生活当中有时也确实就是指这两种协议。<strong>然而在很多情况下，它只是利用 IP 进行通信时所必须用到的<code>协议群</code>的统称。</strong>所谓协议可以把网络协议想象成人与人之间的礼仪行为，不同的场合有不同的礼仪行为，人是实施不同礼仪行为的主体。同样，网络设备是实施网络协议的主体，网络设备通过运行网络协议与其他的网络设备进行交流。同样的道理，你的电脑想要与网络设备交流，也要与网络设备一样运行网络协议，网络协议也是一个软件，是以系统组件的方式安装在你的电脑的操作系统里的。只有通过这些协议的规范别的电脑才能识别你发过去的信息是什么。</p>
<a id="more"></a>
<p>按照计算机网络通信的标准是把数据传输过程用OSI模型来表示，也就是有7层分别是：</p>
<table>
<thead>
<tr>
<th>层次</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>1.物理层（最底层）</td>
<td>定义网络的接口标准</td>
</tr>
<tr>
<td>2.数据链路层</td>
<td>定义帧的开始和结束以及实现透明传输，差错校验</td>
</tr>
<tr>
<td>3.网络层</td>
<td>负责选择最佳路径和规划IP地址</td>
</tr>
<tr>
<td>4.传输层</td>
<td>实现可靠传输，流量控制</td>
</tr>
<tr>
<td>5.会话层</td>
<td>实现管理对话和同步</td>
</tr>
<tr>
<td>6.表示层</td>
<td>完成某些特定功能</td>
</tr>
<tr>
<td>7.应用层（最上层）</td>
<td>所有能产生流量的程序</td>
</tr>
</tbody></table>
<p>TCP/IP协议就分别属于传输层和网络层的协议。</p>
<h4 id="数据传输过程"><a href="#数据传输过程" class="headerlink" title="数据传输过程"></a>数据传输过程</h4><p>数据传输过程指的是一台电脑发送数据到另一台电脑的过程</p>
<p>具体过程：在应用层首先会把数据传到传输层中，传输层会把一大堆的数据分成一段一段进行传输，能够加快传输的速率，并且在数据前加上TCP头，所以在数据层的数据又可以称为数据段；接着会来到网络层，网络层会给每一段数据加上目标IP地址和源IP地址，在该层数据就被封装成我们常说的IP数据包，并且在原来的基础上也就是（<strong>TCP+上层数据</strong>）再加上IP头，那么此时的数据格式就变成了<strong>IP+TCP+上层数据</strong>；然后就会来到数据链路层，此时会在原来的基础上再加上源MAC地址和目标MAC地址，那么此时数据格式就变成以<strong>太网首部+IP+TCP+上层数据</strong>，这其实就是数据帧了，接着就会来到最底层物理层会把数据转成二进制的形式在网络中发送，发送途中借助集线器（基于物理层）、交换器（基于数据链路层）、路由器（基于网络层）来实现数据发送到对应的目标中，类似于寄快递的过程。</p>
<p><img src="/2020/07/14/%E6%A6%82%E8%BF%B0TCP-IP%E5%8D%8F%E8%AE%AE%E5%8F%8A%E5%85%B6%E4%B8%89%E6%8F%A1%E5%9B%9B%E6%8C%A5/%E6%A0%B7%E5%BC%8F00.png" alt="传输过程"></p>
<h4 id="三次握手和四次挥手"><a href="#三次握手和四次挥手" class="headerlink" title="三次握手和四次挥手"></a>三次握手和四次挥手</h4><p>所谓的三握四挥其实就是指的是TCP/IP协议中规范的数据交互方式，在Http、SMTP等应用层协议中使用的传输层协议。</p>
<h4 id="三次握手（建立连接）"><a href="#三次握手（建立连接）" class="headerlink" title="三次握手（建立连接）"></a>三次握手（建立连接）</h4><ol>
<li><p>进行三次握手的原因就是：</p>
<p><strong>防止已失效的连接请求报文突然又传到服务端，从而产生错误</strong>。在数据传输的过程中可能产生各种情况比如说：数据延迟，或者发送途中由于其他的原因卡住，这时候如果用户应为长时间没有收到消息，再一次发送请求，客户端如果没有三次握手的机制的话，会直接响应。当二者建立连接传输数据后，之前由于数据延迟的数据再一次来到服务器，此时就会发生错误。</p>
</li>
<li><p><strong>具体过程</strong>：（客户端两次，服务器端一次）</p>
<ul>
<li>浏览器要先发SYN码，也就是客户端请求和服务器连接</li>
<li>服务器接收SYN码再发给客户端SYN+ACK码，也就是说我们可以连接</li>
<li>客户端接收到服务器的ACK码，验证ACK是否正确，正确则建立数据连接，双方就可以开始通信</li>
</ul>
<p><img src="/2020/07/14/%E6%A6%82%E8%BF%B0TCP-IP%E5%8D%8F%E8%AE%AE%E5%8F%8A%E5%85%B6%E4%B8%89%E6%8F%A1%E5%9B%9B%E6%8C%A5/%E6%A0%B7%E5%BC%8F1.png" alt="建立连接"></p>
</li>
</ol>
<h4 id="四次挥手（断开连接）"><a href="#四次挥手（断开连接）" class="headerlink" title="四次挥手（断开连接）"></a>四次挥手（断开连接）</h4><ol>
<li><p>进行四次挥手的原因是：</p>
<p>四次挥手的原因是确保服务器响应数据的完整性：因为在客户端发送FIN告知发送完毕的时候，此时客户端还是需要接收服务器返回的数据的，数据还没有传输完成，直到服务器发送FIN表示无数据传输并且客户端告知数据接收完成的时候才可以结束，如果没有这个规范，那就会导致数据还没有接收完成服务器就关闭了连接，从而导致数据不完整。</p>
</li>
<li><p><strong>具体过程</strong>：（客户端和服务器端各两次）</p>
<ul>
<li>当客户端无数据传输的时候发FIN码告知服务器，发送完毕</li>
<li>当服务器接收完毕，告诉客户端ACK码，告诉客户端可以关闭通道</li>
<li>服务器发送完毕也会发送FIN码（表示它也没有数据要发送了），告诉浏览器数据发送完毕</li>
<li>客户端接收完毕（ACK码）同样发送ACK码告知服务器数据接收完，可关闭</li>
</ul>
<p><img src="/2020/07/14/%E6%A6%82%E8%BF%B0TCP-IP%E5%8D%8F%E8%AE%AE%E5%8F%8A%E5%85%B6%E4%B8%89%E6%8F%A1%E5%9B%9B%E6%8C%A5/%E6%A0%B7%E5%BC%8F2.png" alt="断开连接"></p>
</li>
</ol>
<p><strong>需要说明的信息：</strong></p>
<ul>
<li>ACK ： TCP协议规定，只有ACK=1时有效，也规定连接建立后所有发送的报文的ACK必须为1 </li>
<li>SYN(SYNchronization) ： 在连接建立时用来同步序号。当SYN=1而ACK=0时，表明这是一个连接请求报文。对方若同意建立连接，则应在响应报文中使SYN=1和ACK=1. 因此, SYN置1就表示这是一个连接请求或连接接受报文。 </li>
<li>FIN （finish）：完，终结的意思， 用来释放一个连接。当 FIN = 1 时，表明此报文段的发送方的数据已经发送完毕，并要求释放连接。</li>
</ul>
<hr>
<p>补充一点理解：</p>
<p><strong>客户端输入URL地址，DNS就会解析域名得到服务器的IP地址，服务器在对应的端口监听客户端的请求，端口通过TCP/IP协议建连接。</strong>这也是为什么在数据交互的时候我们称之为路由端口，路由就是用来接收请求响应数据的，路由是基于TCP/IP连接，网络层又有TCP/IP协议，所以说路由器基于网络层实现。</p>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title>初识MongoDB</title>
    <url>/2020/06/17/%E5%88%9D%E8%AF%86MongoDB/</url>
    <content><![CDATA[<h3 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h3><h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><ol>
<li><p>MongoDB是一个基于分布式文件存储的开源数据库系统。旨在为WEB应用提供可扩展的高性能数据存储解决方案，是前端开发的必备工具之一。MongoDB是一种非关系型数据库，也叫文档型数据库。不支持SQL查询语句，属于新兴数据库范畴。</p>
</li>
<li><p>database:数据库</p>
<p>document:文档，是一条具体的数据，相当于JS中的对象（表中一行）</p>
<p>field:字段，文档中属性的名称，相当于JS对象属性</p>
<p>collection:集合（一张表）</p>
</li>
</ol>
<h5 id="MongoDB的优劣"><a href="#MongoDB的优劣" class="headerlink" title="MongoDB的优劣"></a>MongoDB的优劣</h5><ol>
<li><p>优势：</p>
<ul>
<li>在适量级的内存的MongoDB的性能是非常迅速的，它将热数据存储在物理内存中，使得热数据的读写变得十分快。</li>
<li>MongoDB的高可用和集群架构拥有十分高的扩展性。</li>
<li>MongoDB的Bson和JSon格式的数据十分适合文档格式的存储与查询。<a id="more"></a></li>
</ul>
</li>
<li><p>劣势：</p>
<ul>
<li>不支持事务操作。MongoDB本身没有自带事务机制，若需要在MongoDB中实现事务机制，需通过一个额外的表，从逻辑上自行实现事务。</li>
<li>应用经验少，由于NoSQL兴起时间短，应用经验相比关系型数据库较少。</li>
<li>MongoDB占用空间比起MySQL较大。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="MongoDB的下载和配置"><a href="#MongoDB的下载和配置" class="headerlink" title="MongoDB的下载和配置"></a>MongoDB的下载和配置</h3><ol>
<li><p>下载：<a href="https://www.mongodb.com/" target="_blank" rel="noopener">点击前往官网下载</a></p>
</li>
<li><p>配置的话由于有可能会遇到各种各样的错误，花费了我很长时间，所以我的建议是<a href="https://www.cnblogs.com/zhoulifeng/p/9429597.html" target="_blank" rel="noopener">点击跳转配置文章</a>，这是我在网上看见的最为详细的配置教程，建议跟着这篇文章进行配置。</p>
</li>
<li><p>个人小建议</p>
<ul>
<li><p>最好不要使用默认路径存储到C盘的Program File文件夹下，需要操作权限较为麻烦。</p>
</li>
<li><p>如果在配置是路径中有空格，那么一定要在路径上加上双引号，否则会解析成两个路径</p>
</li>
<li><p>环境变量记得添加</p>
</li>
</ul>
</li>
<li><p>启动和停止MongoDB</p>
<ul>
<li>net start mongoDB</li>
<li>net stop mongoDB</li>
</ul>
</li>
</ol>
<hr>
<h3 id="Mongoose第三方包"><a href="#Mongoose第三方包" class="headerlink" title="Mongoose第三方包"></a>Mongoose第三方包</h3><h5 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h5><ol>
<li>Mongoose是Node.js操作MongoDB数据库所必须要依赖的第三方包，利用Mongoose里面设置好的API实现对数据库的连接以及对数据库集合的创建。</li>
<li>下载：在Node.js命令行输入npm install mongoose</li>
</ol>
<h5 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入第三方模块</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="comment">//设置为true则使Mongoose的默认索引构建使用createIndex()而不是ensureIndex()</span></span><br><span class="line"><span class="comment">//以避免来自MongoDB驱动程序的弃用警告</span></span><br><span class="line">mongoose.set(<span class="string">'useCreateIndex'</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/playground'</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;) <span class="comment">//如果没有这个数据库会自动帮我们创建这个数据库,playground是数据库名</span></span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'数据库连接成功'</span>)) <span class="comment">//捕捉创建结果</span></span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'数据库连接失败'</span>, err))</span><br></pre></td></tr></table></figure>

<p>在power shell命令行中执行该js文件即可实现对数据库的连接操作</p>
<h5 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h5><p>分为两步一是对集合设定规则；二是创建集合</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> courseSchema = <span class="keyword">new</span> mongoose.Schema(&#123; <span class="comment">//创建集合规则</span></span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    author: <span class="built_in">String</span>,</span><br><span class="line">    isPublished: <span class="built_in">Boolean</span></span><br><span class="line">&#125;); <span class="comment">//创建了集合的规则名为courseSchema</span></span><br><span class="line"><span class="keyword">const</span> Course = mongoose.model(<span class="string">'Course'</span>, courseSchema); <span class="comment">//应用规则来创建集合，创建了一个名为course的集合，注意model方法返回的是当前集合的构造函数，第一个参数为集合名称，第二个参数为运用的规则</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="MongoDB的增删改查（Node-js环境）"><a href="#MongoDB的增删改查（Node-js环境）" class="headerlink" title="MongoDB的增删改查（Node.js环境）"></a>MongoDB的增删改查（Node.js环境）</h3><h5 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h5><ol>
<li>创建文档实际上就是对集合中插入数据也就是“增”的操作</li>
<li>同样分为两步<ul>
<li>创建集合实例</li>
<li>调用实例对象下的save方法</li>
</ul>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过实例对象的方法</span></span><br><span class="line"><span class="keyword">const</span> db = <span class="keyword">new</span> Course(&#123; <span class="comment">//在集合中写入数据</span></span><br><span class="line">    name: <span class="string">'html'</span>,</span><br><span class="line">    author: <span class="string">'小齐'</span>,</span><br><span class="line">    isPublished: <span class="literal">true</span></span><br><span class="line">&#125;)<span class="comment">//db就是我们插入的数据也就是一条文档</span></span><br><span class="line">db.save();<span class="comment">//保存，实现插入</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>还有一种创建文档的方法</p>
<p>利用集合中的create方法，返回的也是promise对象</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Course.create(&#123;</span><br><span class="line">    name:<span class="string">'javascript'</span>,</span><br><span class="line">    author:<span class="string">'小方'</span>,</span><br><span class="line">    isPublished:<span class="literal">true</span>   </span><br><span class="line">&#125;,(err,doc)=&gt;&#123;</span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br><span class="line"><span class="built_in">console</span>.log(doc)&#125;)</span><br><span class="line"><span class="comment">//由于该种方法返回的是promise对象，因此可以用then和catch方法得到结果</span></span><br></pre></td></tr></table></figure>

<h5 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h5><ol>
<li><p>删除单个文档</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.findOneAndDelect(&#123;要查询的条件&#125;).then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br><span class="line"><span class="comment">//db是一个集合名</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除多个文档</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.delectMany(&#123;&#125;).then(<span class="function"><span class="params">result</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(result)&#125;)</span><br><span class="line"><span class="comment">//db是一个集合名</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>示例代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入mongoose第三方模块 用来操作数据库</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="comment">// 数据库连接</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/playground'</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">	<span class="comment">// 连接成功</span></span><br><span class="line">	.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'数据库连接成功'</span>))</span><br><span class="line">	<span class="comment">// 连接失败</span></span><br><span class="line">	.catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err, <span class="string">'数据库连接失败'</span>));</span><br><span class="line"><span class="comment">// 创建集合规则</span></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">	name: <span class="built_in">String</span>,</span><br><span class="line">	age: <span class="built_in">Number</span>,</span><br><span class="line">	email: <span class="built_in">String</span>,</span><br><span class="line">	password: <span class="built_in">String</span>,</span><br><span class="line">	hobbies: [<span class="built_in">String</span>]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 使用规则创建集合</span></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">'User'</span>, userSchema);</span><br><span class="line"><span class="comment">// 查找到一条文档并且删除</span></span><br><span class="line"><span class="comment">// 返回删除的文档</span></span><br><span class="line"><span class="comment">// 如何查询条件匹配了多个文档 那么将会删除第一个匹配的文档</span></span><br><span class="line">User.findOneAndDelete(&#123;<span class="attr">_id</span>: <span class="string">'5c09f267aeb04b22f8460968'</span>&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br><span class="line"><span class="comment">// 删除多条文档</span></span><br><span class="line">User.deleteMany(&#123;&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>

<h5 id="更新（修改）文档"><a href="#更新（修改）文档" class="headerlink" title="更新（修改）文档"></a>更新（修改）文档</h5><ol>
<li><p>更新一条文档</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.updateOne(&#123;查询条件&#125;,&#123;要修改的值&#125;).then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新多条文档</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.updateMany(&#123;查询条件&#125;,&#123;要修改的值&#125;).then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br><span class="line"><span class="comment">//在这里当查询条件为空时是全部修改</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>示例代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入mongoose第三方模块 用来操作数据库</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="comment">// 数据库连接</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/playground'</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">	<span class="comment">// 连接成功</span></span><br><span class="line">	.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'数据库连接成功'</span>))</span><br><span class="line">	<span class="comment">// 连接失败</span></span><br><span class="line">	.catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err, <span class="string">'数据库连接失败'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建集合规则</span></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">	name: <span class="built_in">String</span>,</span><br><span class="line">	age: <span class="built_in">Number</span>,</span><br><span class="line">	email: <span class="built_in">String</span>,</span><br><span class="line">	password: <span class="built_in">String</span>,</span><br><span class="line">	hobbies: [<span class="built_in">String</span>]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 使用规则创建集合</span></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">'User'</span>, userSchema);</span><br><span class="line"><span class="comment">// 找到要删除的文档并且删除</span></span><br><span class="line"><span class="comment">// 返回是否删除成功的对象</span></span><br><span class="line"><span class="comment">// 如果匹配了多条文档, 只会删除匹配成功的第一条文档</span></span><br><span class="line"><span class="comment">//把名字为李四的文档改为年龄为12，并且名字叫李狗蛋</span></span><br><span class="line">User.updateOne(&#123;<span class="attr">name</span>: <span class="string">'李四'</span>&#125;, &#123;<span class="attr">age</span>: <span class="number">12</span>, <span class="attr">name</span>: <span class="string">'李狗蛋'</span>&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br><span class="line"><span class="comment">// 把所有的文档的年纪改为30</span></span><br><span class="line">User.updateMany(&#123;&#125;, &#123;<span class="attr">age</span>: <span class="number">30</span>&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>

<h5 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h5><ol>
<li><p>查询语法</p>
<ul>
<li><p>查询一条文档</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">集合.findOne(&#123;查询条件&#125;).then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询全部文档</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">集合.find().then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>匹配大于、小于、包含</p>
<p>$gt:大于</p>
<p>$lt:小于</p>
<p>$in:包含</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">User.find(&#123;<span class="attr">age</span>:&#123;<span class="attr">$gt</span>:<span class="number">20</span>,<span class="attr">$lt</span>:<span class="number">50</span>&#125;&#125;).then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br><span class="line"><span class="comment">//匹配User查询大于20小于50的所有用户</span></span><br><span class="line">User.find(&#123;<span class="attr">hobbies</span>:&#123;<span class="attr">$in</span>:[<span class="string">'吃饭'</span>]&#125;&#125;).then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br><span class="line"><span class="comment">//匹配查询爱好中包含吃饭的所有用户</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>模糊匹配</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   users.find(&#123;<span class="attr">name</span>:&#123;<span class="attr">$regex</span>:<span class="string">'小'</span>&#125;&#125;);</span><br><span class="line">   <span class="comment">//查询出包含有小字的文档</span></span><br><span class="line">users.find(&#123;<span class="attr">name</span>:&#123;<span class="attr">$regex</span>:<span class="string">'明'</span>&#125;&#125;);</span><br><span class="line">   <span class="comment">//查询出包含有明字的文档</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>选择想要查询的字段</p>
<p>select(‘要查询的字段’)；不想查询到的只要在字段前面加上-即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">集合.find().select(<span class="string">'name email -_id'</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br><span class="line"><span class="comment">//在集合中查询出name和email字段，不查询id字段</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="5">
<li><p>跳过和限制查询文档</p>
<ul>
<li><p>跳过查询文档：skip(n)：表示跳过两条数据文档</p>
</li>
<li><p>限制查询文档：limit(m)：表示限制查询两条用户文档</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询文档跳过前两条结果 限制显示3条结果</span></span><br><span class="line">User.find().skip(<span class="number">2</span>).limit(<span class="number">3</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询结果排序</p>
<ul>
<li>利用sort()方法实现，参数为字段，默认是升序，当在字段前加上-号就会变成降序</li>
<li>sort()方法中的参数还可以是对象的形式：{key:排序方式}，key表字段，正数代表升序，负数代表降序</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据年龄字段进行升序排列</span></span><br><span class="line">User.find().sort(<span class="string">'age'</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br><span class="line">User.find().sort(&#123;<span class="string">'age'</span>:<span class="number">1</span>&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br><span class="line"><span class="comment">// 根据年龄字段进行降序排列</span></span><br><span class="line">User.find().sort(<span class="string">'-age'</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br><span class="line">User.find().sort(&#123;<span class="string">'age'</span>:<span class="number">-1</span>&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="7">
<li><p>查询文档的数量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">集合.find().count().then(result=&gt;console.log(result))</span><br><span class="line"><span class="comment">//查询集合中文档的数量</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>集合关联</p>
<p>通常不同的集合的数据之间是有关系的，文章信息和用户信息就在不同的集合中，但文章是用户发布的，要查询文章信息就要访问到用户信息集合，这就是集合关联</p>
<p>在mongoose中提供了populate方法实现集合关联</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户集合规则</span></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">	name: &#123;</span><br><span class="line">		type: <span class="built_in">String</span>,</span><br><span class="line">		required: <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 文章集合规则</span></span><br><span class="line"><span class="keyword">const</span> postSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">	title: &#123;</span><br><span class="line">		type: <span class="built_in">String</span></span><br><span class="line">	&#125;,</span><br><span class="line">	author: &#123;</span><br><span class="line">		type: mongoose.Schema.Types.ObjectId,<span class="comment">//使用id将集合进行关联</span></span><br><span class="line">		ref: <span class="string">'User'</span><span class="comment">//写上要关联的集合</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 用户集合</span></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">'User'</span>, userSchema);</span><br><span class="line"><span class="comment">// 文章集合</span></span><br><span class="line"><span class="keyword">const</span> Post = mongoose.model(<span class="string">'Post'</span>, postSchema);</span><br><span class="line"><span class="comment">// 创建用户</span></span><br><span class="line">User.create(&#123;<span class="attr">name</span>: <span class="string">'Kawhi'</span>&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result));</span><br><span class="line"><span class="comment">// 创建文章</span></span><br><span class="line">Post.create(&#123;<span class="attr">titile</span>: <span class="string">'123'</span>, <span class="attr">author</span>: <span class="string">'5c0caae2c4e4081c28439791'</span>&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result));</span><br><span class="line"><span class="comment">//将User集合中的author信息关联过来</span></span><br><span class="line">Post.find().populate(<span class="string">'author'</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h3 id="mongoose验证"><a href="#mongoose验证" class="headerlink" title="mongoose验证"></a>mongoose验证</h3><h5 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h5><p>在创建集合规则时，可以设置当前字段的验证规则，验证失败则输出插入失败</p>
<h5 id="验证的关键字"><a href="#验证的关键字" class="headerlink" title="验证的关键字"></a>验证的关键字</h5><ul>
<li>required:必传参数；意思是必须写入数据不能为空</li>
<li>type:文本类型；必选字段</li>
<li>minlength:字符串的最小长度</li>
<li>maxlength:字符串的最大长度</li>
<li>trim:去除字符串两边的空格</li>
<li>default:设置当前的默认值（创建的时候不用写对象有了default就会默认生成）</li>
<li>enum:用户只能输入enum里面的内容输入其他的会报错</li>
<li>max/min:设置数值的最大最小值</li>
</ul>
<h5 id="自定义验证规则"><a href="#自定义验证规则" class="headerlink" title="自定义验证规则"></a>自定义验证规则</h5><p>可以采用validate：自定义验证器的方法实现，具体可见示例代码</p>
<h5 id="错误信息的获取"><a href="#错误信息的获取" class="headerlink" title="错误信息的获取"></a>错误信息的获取</h5><p>错误信息都自动存在了error对象里的errors中，可以通过循环取到每一个错误信息</p>
<p>示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> postSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">	title: &#123;</span><br><span class="line">		type: <span class="built_in">String</span>,</span><br><span class="line">		required: [<span class="literal">true</span>, <span class="string">'请传入文章标题'</span>],		</span><br><span class="line">		minlength: [<span class="number">2</span>, <span class="string">'文章长度不能小于2'</span>],<span class="comment">// 字符串的最小长度		</span></span><br><span class="line">		maxlength: [<span class="number">5</span>, <span class="string">'文章长度最大不能超过5'</span>],<span class="comment">// 字符串的最大长度</span></span><br><span class="line">		trim: <span class="literal">true</span><span class="comment">// 去除字符串两边的空格</span></span><br><span class="line">	&#125;,</span><br><span class="line">	age: &#123;</span><br><span class="line">		type: <span class="built_in">Number</span>,</span><br><span class="line">		min: <span class="number">18</span>,<span class="comment">// 数字的最小范围		</span></span><br><span class="line">		max: <span class="number">100</span><span class="comment">// 数字的最大范围</span></span><br><span class="line">	&#125;,</span><br><span class="line">	category: &#123;</span><br><span class="line">		type: <span class="built_in">String</span>,	</span><br><span class="line">		enum: &#123;<span class="comment">// 枚举 列举出当前字段可以拥有的值</span></span><br><span class="line">			values: [<span class="string">'html'</span>, <span class="string">'css'</span>, <span class="string">'javascript'</span>, <span class="string">'node.js'</span>],</span><br><span class="line">			message: <span class="string">'分类名称要在一定的范围内才可以'</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	author: &#123;</span><br><span class="line">		type: <span class="built_in">String</span>,</span><br><span class="line">		validate: &#123;</span><br><span class="line">			validator: <span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">				<span class="comment">// 返回布尔值</span></span><br><span class="line">				<span class="comment">// true 验证成功</span></span><br><span class="line">				<span class="comment">// false 验证失败</span></span><br><span class="line">				<span class="comment">// v 要验证的值</span></span><br><span class="line">				<span class="keyword">return</span> v &amp;&amp; v.length &gt; <span class="number">4</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="comment">// 自定义错误信息</span></span><br><span class="line">			message: <span class="string">'传入的值不符合验证规则'</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> Post = mongoose.model(<span class="string">'Post'</span>, postSchema);</span><br><span class="line">Post.create(&#123;<span class="attr">title</span>:<span class="string">'aa'</span>, <span class="attr">age</span>: <span class="number">60</span>, <span class="attr">category</span>: <span class="string">'java'</span>, <span class="attr">author</span>: <span class="string">'bd'</span>&#125;)</span><br><span class="line">	.then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br><span class="line">	.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">// 获取错误信息对象</span></span><br><span class="line">		<span class="keyword">const</span> err = error.errors;</span><br><span class="line">		<span class="comment">// 循环错误信息对象</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> err) &#123;</span><br><span class="line">			<span class="comment">// 将错误信息打印到控制台中</span></span><br><span class="line">			<span class="built_in">console</span>.log(err[attr][<span class="string">'message'</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
</search>
